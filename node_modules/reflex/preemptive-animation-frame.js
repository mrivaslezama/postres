"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const NO_REQUEST = 0;
const PENDING_REQUEST = 1;
const EXTRA_REQUEST = 2;

let nextID = 0;
let state = NO_REQUEST;
let requests = [];
let ids = [];

const absent = new String("absent");

const requestAnimationFrame = exports.requestAnimationFrame = request => {
  if (state === NO_REQUEST) {
    window.requestAnimationFrame(performAnimationFrame);
  }

  const id = ++nextID;
  requests.push(request);
  ids.push(id);
  state = PENDING_REQUEST;
  return id;
};

const cancelAnimationFrame = exports.cancelAnimationFrame = id => {
  const index = ids.indexOf(id);
  if (index >= 0) {
    ids.splice(index, 1);
    requests.splice(index, 1);
  }
};

const forceAnimationFrame = exports.forceAnimationFrame = (time = window.performance.now()) => performAnimationFrame(time);

const performAnimationFrame = time => {
  switch (state) {
    case NO_REQUEST:
      throw Error(`Unexpected frame request`);
    case PENDING_REQUEST:
      window.requestAnimationFrame(performAnimationFrame);
      state = EXTRA_REQUEST;
      ids.splice(0);
      dispatchAnimationFrame(requests.splice(0), 0, time);
      break;
    case EXTRA_REQUEST:
      state = NO_REQUEST;
      break;
  }
};

const dispatchAnimationFrame = (requests, index, time) => {
  let exception = absent;
  const count = requests.length;
  try {
    while (index < count) {
      const request = requests[index];
      index = index + 1;
      request(time);
    }
  } catch (error) {
    exception = error;
  }

  if (index < count) {
    dispatchAnimationFrame(requests, index, time);
  }

  if (exception != absent) {
    throw exception;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcmVlbXB0aXZlLWFuaW1hdGlvbi1mcmFtZS5qcyJdLCJuYW1lcyI6WyJOT19SRVFVRVNUIiwiUEVORElOR19SRVFVRVNUIiwiRVhUUkFfUkVRVUVTVCIsIm5leHRJRCIsInN0YXRlIiwicmVxdWVzdHMiLCJpZHMiLCJhYnNlbnQiLCJTdHJpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0Iiwid2luZG93IiwicGVyZm9ybUFuaW1hdGlvbkZyYW1lIiwiaWQiLCJwdXNoIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJmb3JjZUFuaW1hdGlvbkZyYW1lIiwidGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiRXJyb3IiLCJkaXNwYXRjaEFuaW1hdGlvbkZyYW1lIiwiZXhjZXB0aW9uIiwiY291bnQiLCJsZW5ndGgiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0EsTUFBTUEsYUFBYSxDQUFuQjtBQUNBLE1BQU1DLGtCQUFrQixDQUF4QjtBQUNBLE1BQU1DLGdCQUFnQixDQUF0Qjs7QUFFQSxJQUFJQyxTQUFpQixDQUFyQjtBQUNBLElBQUlDLFFBQWVKLFVBQW5CO0FBQ0EsSUFBSUssV0FBdUMsRUFBM0M7QUFDQSxJQUFJQyxNQUFxQixFQUF6Qjs7QUFFQSxNQUFNQyxTQUFTLElBQUlDLE1BQUosQ0FBVyxRQUFYLENBQWY7O0FBRU8sTUFBTUMsd0RBQTRCQyxPQUFKLElBQW1DO0FBQ3RFLE1BQUlOLFVBQVVKLFVBQWQsRUFBMEI7QUFDeEJXLFdBQU9GLHFCQUFQLENBQTZCRyxxQkFBN0I7QUFDRDs7QUFFRCxRQUFNQyxLQUFLLEVBQUVWLE1BQWI7QUFDQUUsV0FBU1MsSUFBVCxDQUFjSixPQUFkO0FBQ0FKLE1BQUlRLElBQUosQ0FBU0QsRUFBVDtBQUNBVCxVQUFRSCxlQUFSO0FBQ0EsU0FBT1ksRUFBUDtBQUNELENBVk07O0FBWUEsTUFBTUUsc0RBQXdCRixFQUFELElBQXNCO0FBQ3hELFFBQU1HLFFBQVFWLElBQUlXLE9BQUosQ0FBWUosRUFBWixDQUFkO0FBQ0EsTUFBSUcsU0FBUyxDQUFiLEVBQWdCO0FBQ2RWLFFBQUlZLE1BQUosQ0FBV0YsS0FBWCxFQUFrQixDQUFsQjtBQUNBWCxhQUFTYSxNQUFULENBQWdCRixLQUFoQixFQUF1QixDQUF2QjtBQUNEO0FBQ0YsQ0FOTTs7QUFRQSxNQUFNRyxvREFBc0IsQ0FBQ0MsT0FBYVQsT0FBT1UsV0FBUCxDQUFtQkMsR0FBbkIsRUFBZCxLQUNqQ1Ysc0JBQXNCUSxJQUF0QixDQURLOztBQUdQLE1BQU1SLHdCQUF5QlEsSUFBRCxJQUFnQjtBQUM1QyxVQUFRaEIsS0FBUjtBQUNFLFNBQUtKLFVBQUw7QUFJRSxZQUFNdUIsTUFBTywwQkFBUCxDQUFOO0FBQ0YsU0FBS3RCLGVBQUw7QUFLRVUsYUFBT0YscUJBQVAsQ0FBNkJHLHFCQUE3QjtBQUNBUixjQUFRRixhQUFSO0FBQ0FJLFVBQUlZLE1BQUosQ0FBVyxDQUFYO0FBQ0FNLDZCQUF1Qm5CLFNBQVNhLE1BQVQsQ0FBZ0IsQ0FBaEIsQ0FBdkIsRUFBMkMsQ0FBM0MsRUFBOENFLElBQTlDO0FBQ0E7QUFDRixTQUFLbEIsYUFBTDtBQUlFRSxjQUFRSixVQUFSO0FBQ0E7QUFyQko7QUF1QkQsQ0F4QkQ7O0FBMEJBLE1BQU13Qix5QkFBeUIsQ0FDN0JuQixRQUQ2QixFQUU3QlcsS0FGNkIsRUFHN0JJLElBSDZCLEtBSTFCO0FBQ0gsTUFBSUssWUFBNEJsQixNQUFoQztBQUNBLFFBQU1tQixRQUFRckIsU0FBU3NCLE1BQXZCO0FBQ0EsTUFBSTtBQUNGLFdBQU9YLFFBQVFVLEtBQWYsRUFBc0I7QUFDcEIsWUFBTWhCLFVBQVVMLFNBQVNXLEtBQVQsQ0FBaEI7QUFDQUEsY0FBUUEsUUFBUSxDQUFoQjtBQUNBTixjQUFRVSxJQUFSO0FBQ0Q7QUFDRixHQU5ELENBTUUsT0FBT1EsS0FBUCxFQUFjO0FBQ2RILGdCQUFZRyxLQUFaO0FBQ0Q7O0FBRUQsTUFBSVosUUFBUVUsS0FBWixFQUFtQjtBQUNqQkYsMkJBQXVCbkIsUUFBdkIsRUFBaUNXLEtBQWpDLEVBQXdDSSxJQUF4QztBQUNEOztBQUVELE1BQUlLLGFBQWFsQixNQUFqQixFQUF5QjtBQUN2QixVQUFNa0IsU0FBTjtBQUNEO0FBQ0YsQ0F4QkQiLCJmaWxlIjoicHJlZW1wdGl2ZS1hbmltYXRpb24tZnJhbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG50eXBlIFRpbWUgPSBudW1iZXJcbnR5cGUgU3RhdGUgPSAwIHwgMSB8IDJcblxuLy8gSW52YXJpYW50czpcbi8vIDEuIEluIHRoZSBOT19SRVFVRVNUIHN0YXRlLCB0aGVyZSBpcyBuZXZlciBhIHNjaGVkdWxlZCBhbmltYXRpb24gZnJhbWUuXG4vLyAyLiBJbiB0aGUgUEVORElOR19SRVFVRVNUIGFuZCBFWFRSQV9SRVFVRVNUIHN0YXRlcywgdGhlcmUgaXMgYWx3YXlzIGV4YWN0bHlcbi8vIG9uZSBzY2hlZHVsZWQgYW5pbWF0aW9uIGZyYW1lLlxuY29uc3QgTk9fUkVRVUVTVCA9IDBcbmNvbnN0IFBFTkRJTkdfUkVRVUVTVCA9IDFcbmNvbnN0IEVYVFJBX1JFUVVFU1QgPSAyXG5cbmxldCBuZXh0SUQ6IG51bWJlciA9IDBcbmxldCBzdGF0ZTogU3RhdGUgPSBOT19SRVFVRVNUXG5sZXQgcmVxdWVzdHM6IEFycmF5PCh0aW1lOiBUaW1lKSA9PiBhbnk+ID0gW11cbmxldCBpZHM6IEFycmF5PG51bWJlcj4gPSBbXVxuXG5jb25zdCBhYnNlbnQgPSBuZXcgU3RyaW5nKFwiYWJzZW50XCIpXG5cbmV4cG9ydCBjb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSA8YT4ocmVxdWVzdDogKHRpbWU6IFRpbWUpID0+IGEpID0+IHtcbiAgaWYgKHN0YXRlID09PSBOT19SRVFVRVNUKSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShwZXJmb3JtQW5pbWF0aW9uRnJhbWUpXG4gIH1cblxuICBjb25zdCBpZCA9ICsrbmV4dElEXG4gIHJlcXVlc3RzLnB1c2gocmVxdWVzdClcbiAgaWRzLnB1c2goaWQpXG4gIHN0YXRlID0gUEVORElOR19SRVFVRVNUXG4gIHJldHVybiBpZFxufVxuXG5leHBvcnQgY29uc3QgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAoaWQ6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCBpbmRleCA9IGlkcy5pbmRleE9mKGlkKVxuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGlkcy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgcmVxdWVzdHMuc3BsaWNlKGluZGV4LCAxKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmb3JjZUFuaW1hdGlvbkZyYW1lID0gKHRpbWU6IFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkpID0+XG4gIHBlcmZvcm1BbmltYXRpb25GcmFtZSh0aW1lKVxuXG5jb25zdCBwZXJmb3JtQW5pbWF0aW9uRnJhbWUgPSAodGltZTogVGltZSkgPT4ge1xuICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgY2FzZSBOT19SRVFVRVNUOlxuICAgICAgLy8gVGhpcyBzdGF0ZSBzaG91bGQgbm90IGJlIHBvc3NpYmxlLiBIb3cgY2FuIHRoZXJlIGJlIG5vXG4gICAgICAvLyByZXF1ZXN0LCB5ZXQgc29tZWhvdyB3ZSBhcmUgYWN0aXZlbHkgZnVsZmlsbGluZyBhXG4gICAgICAvLyByZXF1ZXN0P1xuICAgICAgdGhyb3cgRXJyb3IoYFVuZXhwZWN0ZWQgZnJhbWUgcmVxdWVzdGApXG4gICAgY2FzZSBQRU5ESU5HX1JFUVVFU1Q6XG4gICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBkbyBub3QgKmtub3cqIHRoYXQgYW5vdGhlciBmcmFtZSBpc1xuICAgICAgLy8gbmVlZGVkLCBidXQgd2UgbWFrZSBhbiBleHRyYSBmcmFtZSByZXF1ZXN0IGp1c3QgaW5cbiAgICAgIC8vIGNhc2UuIEl0J3MgcG9zc2libGUgdG8gZHJvcCBhIGZyYW1lIGlmIGZyYW1lIGlzIHJlcXVlc3RlZFxuICAgICAgLy8gdG9vIGxhdGUsIHNvIHdlIGp1c3QgZG8gaXQgcHJlZW1wdGl2ZWx5LlxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShwZXJmb3JtQW5pbWF0aW9uRnJhbWUpXG4gICAgICBzdGF0ZSA9IEVYVFJBX1JFUVVFU1RcbiAgICAgIGlkcy5zcGxpY2UoMClcbiAgICAgIGRpc3BhdGNoQW5pbWF0aW9uRnJhbWUocmVxdWVzdHMuc3BsaWNlKDApLCAwLCB0aW1lKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVYVFJBX1JFUVVFU1Q6XG4gICAgICAvLyBUdXJucyBvdXQgdGhlIGV4dHJhIHJlcXVlc3Qgd2FzIG5vdCBuZWVkZWQsIHNvIHdlIHdpbGxcbiAgICAgIC8vIHN0b3AgcmVxdWVzdGluZy4gTm8gcmVhc29uIHRvIGNhbGwgaXQgYWxsIHRoZSB0aW1lIGlmXG4gICAgICAvLyBubyBvbmUgbmVlZHMgaXQuXG4gICAgICBzdGF0ZSA9IE5PX1JFUVVFU1RcbiAgICAgIGJyZWFrXG4gIH1cbn1cblxuY29uc3QgZGlzcGF0Y2hBbmltYXRpb25GcmFtZSA9IDxhPihcbiAgcmVxdWVzdHM6IEFycmF5PCh0aW1lOiBUaW1lKSA9PiBhPixcbiAgaW5kZXg6IG51bWJlcixcbiAgdGltZTogVGltZVxuKSA9PiB7XG4gIGxldCBleGNlcHRpb246IFN0cmluZyB8IEVycm9yID0gYWJzZW50XG4gIGNvbnN0IGNvdW50ID0gcmVxdWVzdHMubGVuZ3RoXG4gIHRyeSB7XG4gICAgd2hpbGUgKGluZGV4IDwgY291bnQpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0c1tpbmRleF1cbiAgICAgIGluZGV4ID0gaW5kZXggKyAxXG4gICAgICByZXF1ZXN0KHRpbWUpXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGV4Y2VwdGlvbiA9IGVycm9yXG4gIH1cblxuICBpZiAoaW5kZXggPCBjb3VudCkge1xuICAgIGRpc3BhdGNoQW5pbWF0aW9uRnJhbWUocmVxdWVzdHMsIGluZGV4LCB0aW1lKVxuICB9XG5cbiAgaWYgKGV4Y2VwdGlvbiAhPSBhYnNlbnQpIHtcbiAgICB0aHJvdyBleGNlcHRpb25cbiAgfVxufVxuIl19