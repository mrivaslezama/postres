"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsubscribe = exports.subscribe = exports.Subscribe = exports.Subscription = undefined;

var _effects = require("./effects");

class Subscription {
  static batch(subscriptions) {
    return new Batch(subscriptions);
  }
  map(tag) {
    return this.map(tag);
  }
  reduce(reducer, init) {
    return init;
  }
}

exports.Subscription = Subscription;
class Subscribe extends Subscription {

  constructor(feed, detail, tagger) {
    super();
    this.feed = feed;
    this.detail = detail;
    this.tagger = tagger;
  }
  map(tag) {
    const decoder = value => tag(this.tagger(value));
    return new Subscribe(this.feed, this.detail, decoder);
  }
  reduce(reducer, init) {
    return reducer(init, this);
  }
}

exports.Subscribe = Subscribe;
class Batch extends Subscription {
  constructor(subscriptions) {
    super();
    this.subscriptions = subscriptions;
  }
  map(tag) {
    const subscriptions = this.subscriptions.map($ => $.map(tag));
    return new Batch(subscriptions);
  }
  reduce(reducer, init) {
    return this.subscriptions.reduce((result, subscription) => subscription.reduce(reducer, result), init);
  }
}

const subscribe = exports.subscribe = (feed, detail, tagger) => new Subscribe(feed, detail, tagger);

const none = new Batch([]);
const unsubscribe = exports.unsubscribe = _ => none;
Subscription.none = none;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdWJzY3JpcHRpb24uanMiXSwibmFtZXMiOlsiU3Vic2NyaXB0aW9uIiwiYmF0Y2giLCJzdWJzY3JpcHRpb25zIiwiQmF0Y2giLCJtYXAiLCJ0YWciLCJyZWR1Y2UiLCJyZWR1Y2VyIiwiaW5pdCIsIlN1YnNjcmliZSIsImNvbnN0cnVjdG9yIiwiZmVlZCIsImRldGFpbCIsInRhZ2dlciIsImRlY29kZXIiLCJ2YWx1ZSIsIiQiLCJyZXN1bHQiLCJzdWJzY3JpcHRpb24iLCJzdWJzY3JpYmUiLCJub25lIiwidW5zdWJzY3JpYmUiLCJfIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBNEJPLE1BQU1BLFlBQU4sQ0FBc0I7QUFFM0IsU0FBT0MsS0FBUCxDQUFhQyxhQUFiLEVBQXFFO0FBQ25FLFdBQU8sSUFBSUMsS0FBSixDQUFVRCxhQUFWLENBQVA7QUFDRDtBQUNERSxNQUFPQyxHQUFQLEVBQThDO0FBQzVDLFdBQU8sS0FBS0QsR0FBTCxDQUFTQyxHQUFULENBQVA7QUFDRDtBQUNEQyxTQUNFQyxPQURGLEVBRUVDLElBRkYsRUFHUztBQUNQLFdBQU9BLElBQVA7QUFDRDtBQWIwQjs7UUFBaEJSLFksR0FBQUEsWTtBQWdCTixNQUFNUyxTQUFOLFNBQW9EVCxZQUFwRCxDQUNpQzs7QUFLdENVLGNBQ0VDLElBREYsRUFFRUMsTUFGRixFQUdFQyxNQUhGLEVBSUU7QUFDQTtBQUNBLFNBQUtGLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNEO0FBQ0RULE1BQU9DLEdBQVAsRUFBZ0Q7QUFDOUMsVUFBTVMsVUFBV0MsS0FBRCxJQUFtQlYsSUFBSSxLQUFLUSxNQUFMLENBQVlFLEtBQVosQ0FBSixDQUFuQztBQUNBLFdBQU8sSUFBSU4sU0FBSixDQUFjLEtBQUtFLElBQW5CLEVBQXlCLEtBQUtDLE1BQTlCLEVBQXNDRSxPQUF0QyxDQUFQO0FBQ0Q7QUFDRFIsU0FDRUMsT0FERixFQUtFQyxJQUxGLEVBTVM7QUFDUCxXQUFPRCxRQUFRQyxJQUFSLEVBQWMsSUFBZCxDQUFQO0FBQ0Q7QUEzQnFDOztRQUQzQkMsUyxHQUFBQSxTO0FBK0JiLE1BQU1OLEtBQU4sU0FBdUJILFlBQXZCLENBQXVDO0FBQ3JDVSxjQUFZUixhQUFaLEVBQW1EO0FBQ2pEO0FBQ0EsU0FBS0EsYUFBTCxHQUFxQkEsYUFBckI7QUFDRDtBQUNERSxNQUFPQyxHQUFQLEVBQThDO0FBQzVDLFVBQU1ILGdCQUFnQixLQUFLQSxhQUFMLENBQW1CRSxHQUFuQixDQUF1QlksS0FBS0EsRUFBRVosR0FBRixDQUFNQyxHQUFOLENBQTVCLENBQXRCO0FBQ0EsV0FBTyxJQUFJRixLQUFKLENBQVVELGFBQVYsQ0FBUDtBQUNEO0FBQ0RJLFNBQ0VDLE9BREYsRUFFRUMsSUFGRixFQUdTO0FBQ1AsV0FBTyxLQUFLTixhQUFMLENBQW1CSSxNQUFuQixDQUNMLENBQUNXLE1BQUQsRUFBZ0JDLFlBQWhCLEtBQ0VBLGFBQWFaLE1BQWIsQ0FBb0JDLE9BQXBCLEVBQTZCVSxNQUE3QixDQUZHLEVBR0xULElBSEssQ0FBUDtBQUtEO0FBbEJvQzs7QUFzQmhDLE1BQU1XLGdDQUFZLENBQ3ZCUixJQUR1QixFQUV2QkMsTUFGdUIsRUFHdkJDLE1BSHVCLEtBSUMsSUFBSUosU0FBSixDQUFjRSxJQUFkLEVBQW9CQyxNQUFwQixFQUE0QkMsTUFBNUIsQ0FKbkI7O0FBTVAsTUFBTU8sT0FBMEIsSUFBSWpCLEtBQUosQ0FBVSxFQUFWLENBQWhDO0FBQ08sTUFBTWtCLG9DQUFrQkMsQ0FBSixJQUFrQ0YsSUFBdEQ7QUFDUHBCLGFBQWFvQixJQUFiLEdBQW9CQSxJQUFwQiIsImZpbGUiOiJzdWJzY3JpcHRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgeyBFZmZlY3RzIH0gZnJvbSBcIi4vZWZmZWN0c1wiXG5pbXBvcnQgdHlwZSB7IEFkZHJlc3MgfSBmcm9tIFwiLi9zaWduYWxcIlxuXG50eXBlIFRhZ2dlcjxhLCBiPiA9ICh2YWx1ZTogYSkgPT4gYlxuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmliZXI8aW5mbywgaW5uLCBvdXQ+IHtcbiAgZGV0YWlsOiBpbmZvLFxuICB0YWdnZXI6IFRhZ2dlcjxpbm4sIG91dD5cbn1cblxuZXhwb3J0IHR5cGUgU2VydmljZTxtZXNzYWdlLCBvdXQsIGlubiwgbW9kZWwsIGluZm8+ID0ge1xuICBpbmJveDogQWRkcmVzczxpbm4+LFxuICBzdWJzY3JpYmVyczogQXJyYXk8U3Vic2NyaWJlcjxpbmZvLCBvdXQsIG1lc3NhZ2U+PixcbiAgc3RhdGU6IG1vZGVsLFxuICBmZWVkOiBGZWVkPG91dCwgaW5uLCBtb2RlbCwgaW5mbz5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGZWVkPG91dCwgaW5uLCBtb2RlbCwgaW5mbz4ge1xuICBhZGRyZXNzPzogc3RyaW5nLFxuICBpbml0KCk6IG1vZGVsLFxuICBzdWJzY3JpYmU8bWVzc2FnZT4oc3Vic2NyaWJlcnM6IEFycmF5PFN1YnNjcmliZXI8aW5mbywgb3V0LCBtZXNzYWdlPj4pOiBpbm4sXG4gIHVwZGF0ZTxtZXNzYWdlPihcbiAgICBzdGF0ZTogbW9kZWwsXG4gICAgaW5wdXQ6IGlubixcbiAgICBvdXRib3g6IEFkZHJlc3M8bWVzc2FnZT5cbiAgKTogW21vZGVsLCBFZmZlY3RzPGlubj5dXG59XG5cbmV4cG9ydCBjbGFzcyBTdWJzY3JpcHRpb248YT4ge1xuICBzdGF0aWMgbm9uZTogU3Vic2NyaXB0aW9uPCo+XG4gIHN0YXRpYyBiYXRjaChzdWJzY3JpcHRpb25zOiBBcnJheTxTdWJzY3JpcHRpb248YT4+KTogU3Vic2NyaXB0aW9uPGE+IHtcbiAgICByZXR1cm4gbmV3IEJhdGNoKHN1YnNjcmlwdGlvbnMpXG4gIH1cbiAgbWFwPGI+KHRhZzogKHZhbHVlOiBhKSA9PiBiKTogU3Vic2NyaXB0aW9uPGI+IHtcbiAgICByZXR1cm4gdGhpcy5tYXAodGFnKVxuICB9XG4gIHJlZHVjZTxzdGF0ZT4oXG4gICAgcmVkdWNlcjogKHJlc3VsdDogc3RhdGUsIGlucHV0OiBTdWJzY3JpYmU8YSwgKiwgKiwgKiwgKj4pID0+IHN0YXRlLFxuICAgIGluaXQ6IHN0YXRlXG4gICk6IHN0YXRlIHtcbiAgICByZXR1cm4gaW5pdFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJzY3JpYmU8b3V0LCBpbm4sIG1zZywgbW9kZWwsIGluZm8+IGV4dGVuZHMgU3Vic2NyaXB0aW9uPG91dD5cbiAgaW1wbGVtZW50cyBTdWJzY3JpYmVyPGluZm8sIGlubiwgb3V0PiB7XG4gIGZlZWQ6IEZlZWQ8aW5uLCBtc2csIG1vZGVsLCBpbmZvPlxuICBkZXRhaWw6IGluZm9cbiAgdGFnZ2VyOiBUYWdnZXI8aW5uLCBvdXQ+XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZmVlZDogRmVlZDxpbm4sIG1zZywgbW9kZWwsIGluZm8+LFxuICAgIGRldGFpbDogaW5mbyxcbiAgICB0YWdnZXI6IFRhZ2dlcjxpbm4sIG91dD5cbiAgKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZmVlZCA9IGZlZWRcbiAgICB0aGlzLmRldGFpbCA9IGRldGFpbFxuICAgIHRoaXMudGFnZ2VyID0gdGFnZ2VyXG4gIH1cbiAgbWFwPGI+KHRhZzogKHZhbHVlOiBvdXQpID0+IGIpOiBTdWJzY3JpcHRpb248Yj4ge1xuICAgIGNvbnN0IGRlY29kZXIgPSAodmFsdWU6IGlubik6IGIgPT4gdGFnKHRoaXMudGFnZ2VyKHZhbHVlKSlcbiAgICByZXR1cm4gbmV3IFN1YnNjcmliZSh0aGlzLmZlZWQsIHRoaXMuZGV0YWlsLCBkZWNvZGVyKVxuICB9XG4gIHJlZHVjZTxzdGF0ZT4oXG4gICAgcmVkdWNlcjogKFxuICAgICAgcmVzdWx0OiBzdGF0ZSxcbiAgICAgIGlucHV0OiBTdWJzY3JpYmU8b3V0LCBpbm4sIG1zZywgbW9kZWwsIGluZm8+XG4gICAgKSA9PiBzdGF0ZSxcbiAgICBpbml0OiBzdGF0ZVxuICApOiBzdGF0ZSB7XG4gICAgcmV0dXJuIHJlZHVjZXIoaW5pdCwgdGhpcylcbiAgfVxufVxuXG5jbGFzcyBCYXRjaDxhPiBleHRlbmRzIFN1YnNjcmlwdGlvbjxhPiB7XG4gIGNvbnN0cnVjdG9yKHN1YnNjcmlwdGlvbnM6IEFycmF5PFN1YnNjcmlwdGlvbjxhPj4pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc1xuICB9XG4gIG1hcDxiPih0YWc6ICh2YWx1ZTogYSkgPT4gYik6IFN1YnNjcmlwdGlvbjxiPiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5tYXAoJCA9PiAkLm1hcCh0YWcpKVxuICAgIHJldHVybiBuZXcgQmF0Y2goc3Vic2NyaXB0aW9ucylcbiAgfVxuICByZWR1Y2U8c3RhdGU+KFxuICAgIHJlZHVjZXI6IChyZXN1bHQ6IHN0YXRlLCBpbnB1dDogU3Vic2NyaWJlPGEsICosICosICosICo+KSA9PiBzdGF0ZSxcbiAgICBpbml0OiBzdGF0ZVxuICApOiBzdGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5yZWR1Y2UoXG4gICAgICAocmVzdWx0OiBzdGF0ZSwgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb248YT4pOiBzdGF0ZSA9PlxuICAgICAgICBzdWJzY3JpcHRpb24ucmVkdWNlKHJlZHVjZXIsIHJlc3VsdCksXG4gICAgICBpbml0XG4gICAgKVxuICB9XG4gIHN1YnNjcmlwdGlvbnM6IEFycmF5PFN1YnNjcmlwdGlvbjxhPj5cbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZSA9IDxvdXRlciwgaW5uZXIsIG1lc3NhZ2UsIG1vZGVsLCBpbmZvPihcbiAgZmVlZDogRmVlZDxpbm5lciwgbWVzc2FnZSwgbW9kZWwsIGluZm8+LFxuICBkZXRhaWw6IGluZm8sXG4gIHRhZ2dlcjogVGFnZ2VyPGlubmVyLCBvdXRlcj5cbik6IFN1YnNjcmlwdGlvbjxvdXRlcj4gPT4gbmV3IFN1YnNjcmliZShmZWVkLCBkZXRhaWwsIHRhZ2dlcilcblxuY29uc3Qgbm9uZTogU3Vic2NyaXB0aW9uPGFueT4gPSBuZXcgQmF0Y2goW10pXG5leHBvcnQgY29uc3QgdW5zdWJzY3JpYmUgPSA8YT4oXzogbWl4ZWQpOiBTdWJzY3JpcHRpb248YT4gPT4gbm9uZVxuU3Vic2NyaXB0aW9uLm5vbmUgPSBub25lXG4iXX0=