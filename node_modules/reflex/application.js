"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.start = exports.beginner = undefined;

var _task = require("./task");

var _effects = require("./effects");

var _dom = require("./dom");

var _reflexDriver = require("reflex-driver");

var _subscription = require("./subscription");

class Application {
  constructor(send, model, view, task, services) {
    this.send = send;
    this.model = model;
    this.view = view;
    this.task = task;
    this.services = services;
  }

}

const first = xs => xs[0];
const second = xs => xs[1];

const beginner = exports.beginner = configuration => ({
  flags: void 0,
  init: _ => [configuration.model, _effects.Effects.none],
  update: (model, action) => [configuration.update(model, action), _effects.Effects.none],
  view: configuration.view,
  subscriptions: _subscription.unsubscribe
});

const start = exports.start = (configuration, drive) => {
  const { init, view, update, flags } = configuration;
  const subscriptions = configuration.subscriptions == null ? _subscription.unsubscribe : configuration.subscriptions;

  const send = action => {
    const [model, fx] = update(application.model, action);
    application.model = model;
    application.view = new _dom.LazyRoot(view, model, send);
    application.task = fx.execute(send);

    application.services = subscriptions(model).reduce(subscribe, application.services);
    exectueServices(application.services, send);
    drive(application);
  };

  const [state, fx] = init(flags);

  const application = new Application(send, state, new _dom.LazyRoot(view, state, send), fx.execute(send), subscriptions(state).reduce(subscribe, {
    nextAddress: 0,
    outbox: send,
    active: Object.create(null)
  }));

  exectueServices(application.services, send);
  drive(application);
  return application;
};

const subscribe = (services, subscription) => {
  const { active, outbox } = services;
  const { feed, detail, tagger } = subscription;
  const service = active[String(feed.address)];

  if (service == null || service.feed !== feed) {
    const address = `/${++services.nextAddress}`;
    active[address] = spawnService(address, subscription, feed, outbox);
  } else {
    service.subscribers.push(subscription);
  }

  return services;
};

const spawnService = (address, subscription, feed, outbox) => {
  const subscribers = [subscription];
  const state = feed.init();
  feed.address = address;
  const send = input => {
    const [state, fx] = feed.update(service.state, input, outbox);
    service.state = state;
    fx.execute(send);
  };

  const service = {
    feed,
    subscribers,
    state,
    inbox: send
  };

  return service;
};

const exectueServices = (services, send) => {
  for (let address in services.active) {
    exectueService(services.active[address], send);
  }
};

const exectueService = (service, outbox) => {
  const { state, feed, subscribers, inbox } = service;
  const [next, fx] = feed.update(state, feed.subscribe(subscribers), outbox);
  service.state = next;
  fx.execute(inbox);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,