"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.thunk = exports.elementNS = exports.element = exports.text = exports.LazyRoot = undefined;

var _reflexDriver = require("reflex-driver");

class LazyRoot {
  constructor(view, state, mailbox) {
    this.state = state;
    this.view = view;
    this.mailbox = mailbox;
  }
  renderWith(renderer) {
    driver = renderer;
    return this.view(this.state, this.mailbox);
  }
}

exports.LazyRoot = LazyRoot;
class ErrorDriver {
  createElement(..._) {
    throw new Error(`You need to use a reflex driver to create element nodes`);
  }
  createElementNS(..._) {
    throw new Error(`You need to use a reflex driver to create element nodes`);
  }
  createTextNode(..._) {
    throw new Error(`You need to use a reflex driver to create text nodes`);
  }
  createThunk(..._) {
    throw new Error(`You need to use a reflex driver to create thunk nodes`);
  }
  render(node) {
    throw new Error(`You need to use a reflex driver to render nodes`);
  }
}

let driver = new ErrorDriver();

const text = exports.text = content => driver.createTextNode(content);

const element = exports.element = (tagName, properties, children) => driver.createElement(tagName, properties, children);

const elementNS = exports.elementNS = (namespaceURI, tagName, properties, children) => driver.createElementNS(namespaceURI, tagName, properties, children);

const thunk = exports.thunk = (key, view, ...args) => driver.createThunk(key, view, args);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9kb20uanMiXSwibmFtZXMiOlsiTGF6eVJvb3QiLCJjb25zdHJ1Y3RvciIsInZpZXciLCJzdGF0ZSIsIm1haWxib3giLCJyZW5kZXJXaXRoIiwicmVuZGVyZXIiLCJkcml2ZXIiLCJFcnJvckRyaXZlciIsImNyZWF0ZUVsZW1lbnQiLCJfIiwiRXJyb3IiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVRodW5rIiwicmVuZGVyIiwibm9kZSIsInRleHQiLCJjb250ZW50IiwiZWxlbWVudCIsInRhZ05hbWUiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW4iLCJlbGVtZW50TlMiLCJuYW1lc3BhY2VVUkkiLCJ0aHVuayIsImtleSIsImFyZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFJTyxNQUFNQSxRQUFOLENBQStDO0FBSXBEQyxjQUNFQyxJQURGLEVBRUVDLEtBRkYsRUFHRUMsT0FIRixFQUlFO0FBQ0EsU0FBS0QsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0QsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0UsT0FBTCxHQUFlQSxPQUFmO0FBQ0Q7QUFDREMsYUFBdUJDLFFBQXZCLEVBQXFEO0FBQ25EQyxhQUFTRCxRQUFUO0FBQ0EsV0FBTyxLQUFLSixJQUFMLENBQVUsS0FBS0MsS0FBZixFQUFzQixLQUFLQyxPQUEzQixDQUFQO0FBQ0Q7QUFoQm1EOztRQUF6Q0osUSxHQUFBQSxRO0FBbUJiLE1BQU1RLFdBQU4sQ0FBMEM7QUFDeENDLGdCQUFjLEdBQUdDLENBQWpCLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMsS0FBSixDQUFXLHlEQUFYLENBQU47QUFDRDtBQUNEQyxrQkFBZ0IsR0FBR0YsQ0FBbkIsRUFBNEI7QUFDMUIsVUFBTSxJQUFJQyxLQUFKLENBQVcseURBQVgsQ0FBTjtBQUNEO0FBQ0RFLGlCQUFlLEdBQUdILENBQWxCLEVBQTJCO0FBQ3pCLFVBQU0sSUFBSUMsS0FBSixDQUFXLHNEQUFYLENBQU47QUFDRDtBQUNERyxjQUFZLEdBQUdKLENBQWYsRUFBd0I7QUFDdEIsVUFBTSxJQUFJQyxLQUFKLENBQVcsdURBQVgsQ0FBTjtBQUNEO0FBQ0RJLFNBQU9DLElBQVAsRUFBeUI7QUFDdkIsVUFBTSxJQUFJTCxLQUFKLENBQVcsaURBQVgsQ0FBTjtBQUNEO0FBZnVDOztBQWtCMUMsSUFBSUosU0FBc0IsSUFBSUMsV0FBSixFQUExQjs7QUFFTyxNQUFNUyxzQkFBUUMsT0FBRCxJQUEyQlgsT0FBT00sY0FBUCxDQUFzQkssT0FBdEIsQ0FBeEM7O0FBRUEsTUFBTUMsNEJBQVUsQ0FDckJDLE9BRHFCLEVBRXJCQyxVQUZxQixFQUdyQkMsUUFIcUIsS0FJWmYsT0FBT0UsYUFBUCxDQUFxQlcsT0FBckIsRUFBOEJDLFVBQTlCLEVBQTBDQyxRQUExQyxDQUpKOztBQU1BLE1BQU1DLGdDQUFZLENBQ3ZCQyxZQUR1QixFQUV2QkosT0FGdUIsRUFHdkJDLFVBSHVCLEVBSXZCQyxRQUp1QixLQUtkZixPQUFPSyxlQUFQLENBQXVCWSxZQUF2QixFQUFxQ0osT0FBckMsRUFBOENDLFVBQTlDLEVBQTBEQyxRQUExRCxDQUxKOztBQU9BLE1BQU1HLHdCQXdCRCxDQUFDQyxHQUFELEVBQU14QixJQUFOLEVBQVksR0FBR3lCLElBQWYsS0FBd0JwQixPQUFPTyxXQUFQLENBQW1CWSxHQUFuQixFQUF3QnhCLElBQXhCLEVBQStCeUIsSUFBL0IsQ0F4QjdCIiwiZmlsZSI6ImRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB7IERyaXZlciwgTm9kZSB9IGZyb20gXCJyZWZsZXgtZHJpdmVyXCJcbmltcG9ydCB0eXBlIHsgUHJvcGVydGllcyB9IGZyb20gXCJyZWZsZXgtZHJpdmVyXCJcbmltcG9ydCB0eXBlIHsgQWRkcmVzcyB9IGZyb20gXCIuL3NpZ25hbFwiXG5cbmV4cG9ydCBjbGFzcyBMYXp5Um9vdDxtb2RlbCwgbWVzc2FnZT4gaW1wbGVtZW50cyBOb2RlIHtcbiAgc3RhdGU6IG1vZGVsXG4gIHZpZXc6IChzdGF0ZTogbW9kZWwsIG1haWxib3g6IEFkZHJlc3M8bWVzc2FnZT4pID0+ICpcbiAgbWFpbGJveDogQWRkcmVzczxtZXNzYWdlPlxuICBjb25zdHJ1Y3RvcihcbiAgICB2aWV3OiAoc3RhdGU6IG1vZGVsLCBtYWlsYm94OiBBZGRyZXNzPG1lc3NhZ2U+KSA9PiAqLFxuICAgIHN0YXRlOiBtb2RlbCxcbiAgICBtYWlsYm94OiBBZGRyZXNzPG1lc3NhZ2U+XG4gICkge1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm1haWxib3ggPSBtYWlsYm94XG4gIH1cbiAgcmVuZGVyV2l0aDxub2RlOiBOb2RlPihyZW5kZXJlcjogRHJpdmVyPG5vZGU+KTogbm9kZSB7XG4gICAgZHJpdmVyID0gcmVuZGVyZXJcbiAgICByZXR1cm4gdGhpcy52aWV3KHRoaXMuc3RhdGUsIHRoaXMubWFpbGJveClcbiAgfVxufVxuXG5jbGFzcyBFcnJvckRyaXZlciBpbXBsZW1lbnRzIERyaXZlcjxOb2RlPiB7XG4gIGNyZWF0ZUVsZW1lbnQoLi4uXyk6IE5vZGUge1xuICAgIHRocm93IG5ldyBFcnJvcihgWW91IG5lZWQgdG8gdXNlIGEgcmVmbGV4IGRyaXZlciB0byBjcmVhdGUgZWxlbWVudCBub2Rlc2ApXG4gIH1cbiAgY3JlYXRlRWxlbWVudE5TKC4uLl8pOiBOb2RlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBuZWVkIHRvIHVzZSBhIHJlZmxleCBkcml2ZXIgdG8gY3JlYXRlIGVsZW1lbnQgbm9kZXNgKVxuICB9XG4gIGNyZWF0ZVRleHROb2RlKC4uLl8pOiBOb2RlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBuZWVkIHRvIHVzZSBhIHJlZmxleCBkcml2ZXIgdG8gY3JlYXRlIHRleHQgbm9kZXNgKVxuICB9XG4gIGNyZWF0ZVRodW5rKC4uLl8pOiBOb2RlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBuZWVkIHRvIHVzZSBhIHJlZmxleCBkcml2ZXIgdG8gY3JlYXRlIHRodW5rIG5vZGVzYClcbiAgfVxuICByZW5kZXIobm9kZTogTm9kZSk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcihgWW91IG5lZWQgdG8gdXNlIGEgcmVmbGV4IGRyaXZlciB0byByZW5kZXIgbm9kZXNgKVxuICB9XG59XG5cbmxldCBkcml2ZXI6IERyaXZlcjxhbnk+ID0gbmV3IEVycm9yRHJpdmVyKClcblxuZXhwb3J0IGNvbnN0IHRleHQgPSAoY29udGVudDogc3RyaW5nKTogTm9kZSA9PiBkcml2ZXIuY3JlYXRlVGV4dE5vZGUoY29udGVudClcblxuZXhwb3J0IGNvbnN0IGVsZW1lbnQgPSAoXG4gIHRhZ05hbWU6IHN0cmluZyxcbiAgcHJvcGVydGllczogP1Byb3BlcnRpZXMsXG4gIGNoaWxkcmVuOiA/QXJyYXk8c3RyaW5nIHwgTm9kZT5cbik6IE5vZGUgPT4gZHJpdmVyLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgcHJvcGVydGllcywgY2hpbGRyZW4pXG5cbmV4cG9ydCBjb25zdCBlbGVtZW50TlMgPSAoXG4gIG5hbWVzcGFjZVVSSTogc3RyaW5nLFxuICB0YWdOYW1lOiBzdHJpbmcsXG4gIHByb3BlcnRpZXM6ID9Qcm9wZXJ0aWVzLFxuICBjaGlsZHJlbjogP0FycmF5PHN0cmluZyB8IE5vZGU+XG4pOiBOb2RlID0+IGRyaXZlci5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCB0YWdOYW1lLCBwcm9wZXJ0aWVzLCBjaGlsZHJlbilcblxuZXhwb3J0IGNvbnN0IHRodW5rOiA8YSwgYiwgYywgZCwgZSwgZiwgZywgaCwgaSwgaj4oXG4gIGtleTogc3RyaW5nLFxuICB2aWV3OiAoXG4gICAgYTA6IGEsXG4gICAgYTE6IGIsXG4gICAgYTI6IGMsXG4gICAgYTM6IGQsXG4gICAgYTQ6IGUsXG4gICAgYTU6IGYsXG4gICAgYTY6IGcsXG4gICAgYTc6IGgsXG4gICAgYTg6IGksXG4gICAgYTk6IGpcbiAgKSA9PiBOb2RlLFxuICBhMDogYSxcbiAgYTE6IGIsXG4gIGEyOiBjLFxuICBhMzogZCxcbiAgYTQ6IGUsXG4gIGE1OiBmLFxuICBhNjogZyxcbiAgYTc6IGgsXG4gIGE4OiBpLFxuICBhOTogalxuKSA9PiBOb2RlID0gKGtleSwgdmlldywgLi4uYXJncykgPT4gZHJpdmVyLmNyZWF0ZVRodW5rKGtleSwgdmlldywgKGFyZ3M6IGFueSkpXG4iXX0=