(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./task", "./effects", "./dom", "./subscription"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./task"), require("./effects"), require("./dom"), require("./subscription"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.task, global.effects, global.dom, global.subscription);
    global.application = mod.exports;
  }
})(this, function (exports, _task, _effects, _dom, _subscription) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.start = exports.beginner = undefined;


  class Application {
    constructor(send, model, view, task, services) {
      this.send = send;
      this.model = model;
      this.view = view;
      this.task = task;
      this.services = services;
    }

  }

  const first = xs => xs[0];
  const second = xs => xs[1];

  const beginner = exports.beginner = configuration => ({
    flags: void 0,
    init: _ => [configuration.model, _effects.Effects.none],
    update: (model, action) => [configuration.update(model, action), _effects.Effects.none],
    view: configuration.view,
    subscriptions: model => _subscription.none
  });

  const noSubscribtions = _ => _subscription.none;

  const start = exports.start = configuration => write => {
    const { init, view, update, flags } = configuration;
    const subscriptions = configuration.subscriptions == null ? noSubscribtions : configuration.subscriptions;

    const send = action => {
      const [model, fx] = update(application.model, action);
      application.model = model;
      application.view = (0, _dom.root)(view, model, send);
      application.task = fx.execute(send);

      application.services = subscriptions(model).reduce(subscribe, application.services);
      exectueServices(application.services, send);
      write(application);
    };

    const [model, fx] = init(flags);

    const application = new Application(send, model, (0, _dom.root)(view, model, send), fx.execute(send), subscriptions(model).reduce(subscribe, {
      nextAddress: 0,
      active: Object.create(null)
    }));

    exectueServices(application.services, send);
    return write(application);
  };

  const subscribe = (services, subscription) => {
    const { active } = services;
    const { feed, detail } = subscription;
    const service = active[String(feed.address)];

    if (service == null || service.feed !== feed) {
      const address = `/${++services.nextAddress}`;
      const subscriptions = [subscription];
      const state = feed.init();
      feed.address = address;

      active[address] = { feed, subscriptions, state };
    } else {
      service.subscriptions.push(subscription);
    }

    return services;
  };

  const exectueServices = (services, send) => {
    for (let address in services.active) {
      exectueService(services.active[address], send);
    }
  };

  const exectueService = (service, send) => {
    const { state, feed, subscriptions } = service;
    const [model, fx] = feed.update(state, feed.subscribe(subscriptions));
    service.state = model;
    fx.execute(send);
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./driver"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./driver"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.driver);
    global.dom = mod.exports;
  }
})(this, function (exports, _driver) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.thunk = exports.node = exports.text = exports.root = exports.LazyNode = undefined;


  let driver = null;

  const absent = new String("absent");

  class Root {
    constructor(view, model, address) {
      _initialiseProps.call(this);

      this.view = view;
      this.model = model;
      this.address = address;
    }
    renderWith(current) {
      let exception = absent;
      const previous = driver;
      driver = current;

      try {
        driver.render(this.view(this.model, this.address));
      } catch (error) {
        exception = error;
      }

      driver = previous;

      if (exception != absent) {
        throw exception;
      }
    }

  }

  var _initialiseProps = function () {
    this.$type = "VirtualRoot";
  };

  class LazyNode {
    constructor(tagName, properties, children) {
      this.$type = "LazyTree";

      this.tagName = tagName;
      this.properties = properties;
      this.children = children;
      this.key = properties == null ? null : properties.key;
    }
    force() {
      if (driver == null) {
        throw TypeError("LazyTree may only be forced from with in the Root.renderWith(driver) call");
      }

      return driver.node(this.tagName, this.properties, this.children);
    }

  }

  exports.LazyNode = LazyNode;
  class LazyThunk {
    constructor(key, view, ...args) {
      this.$type = "LazyTree";

      this.key = key;
      this.view = view;
      this.args = args;
    }
    force() {
      if (driver == null) {
        throw TypeError("LazyTree may only be forced from with in the Root.renderWith(driver) call");
      }

      return driver.thunk(this.key, this.view, ...this.args);
    }

  }

  const root = exports.root = (view, model, address) => new Root(view, model, address);

  const text = exports.text = content => driver == null ? content : driver.text(content);

  const node = exports.node = (tagName, properties, children) => driver == null ? new LazyNode(tagName, properties, children) : driver.node(tagName, properties, children);

  const thunk = exports.thunk = (key, view, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) => driver == null ? new LazyThunk(key, view, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) : driver.thunk(key, view, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof exports !== "undefined") {
    factory();
  } else {
    var mod = {
      exports: {}
    };
    factory();
    global.driver = mod.exports;
  }
})(this, function () {
  "use strict";
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkcml2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6W119
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./task"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./task"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.task);
    global.effects = mod.exports;
  }
})(this, function (exports, _task) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Effects = undefined;


  const raise = error => {
    throw Error(`Effects should be created from task that never fail but it did fail with error ${error}`);
  };

  const ignore = _ => void 0;

  const nil = _task.Task.succeed(void 0);

  const never = new _task.Task((succeed, fail) => void 0);

  class Effects {
    static task(task) {
      console.warn("Effects.task is deprecated please use Effects.perform instead");
      return new Perform(task);
    }
    static perform(task) {
      return new Perform(task);
    }
    static tick(tag) {
      console.warn("Effects.tick is deprecated please use Effects.perform(Task.requestAnimationFrame().map(tag)) instead");
      return new Perform(_task.Task.requestAnimationFrame().map(tag));
    }
    static receive(action) {
      const fx = new Perform(new _task.Task((succeed, fail) => void Promise.resolve(action).then(succeed, fail)));
      return fx;
    }
    static batch(effects) {
      return new Batch(effects);
    }
    map(f) {
      throw Error("Subclass of abstract Effect must implement map");
    }
    execute(address) {
      throw Error("Subclass of abstract Effect must implement execute");
    }
  }

  exports.Effects = Effects;
  class Perform extends Effects {
    constructor(task) {
      super();
      this.task = task;
    }
    map(f) {
      return new Perform(this.task.map(f));
    }
    execute(address) {
      return this.task.chain(value => _task.Task.send(address, value));
    }
  }

  class None extends Effects {
    map(f) {
      return Effects.none;
    }
    execute(address) {
      return nil;
    }
  }
  Effects.none = new None();

  class Batch extends Effects {
    constructor(effects) {
      super();
      this.effects = effects;
    }
    map(f) {
      return new Batch(this.effects.map(effect => effect.map(f)));
    }
    execute(address) {
      return new _task.Task((succeed, fail) => {
        const { effects } = this;
        const count = effects.length;
        let index = 0;
        while (index < count) {
          const effect = effects[index];
          if (!(effect instanceof None)) {
            _task.Task.fork(effect.execute(address), ignore, raise);
          }

          index = index + 1;
        }
        succeed(void 0);
      });
    }

  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lZmZlY3RzLmpzIl0sIm5hbWVzIjpbInJhaXNlIiwiZXJyb3IiLCJFcnJvciIsImlnbm9yZSIsIl8iLCJuaWwiLCJzdWNjZWVkIiwibmV2ZXIiLCJmYWlsIiwiRWZmZWN0cyIsInRhc2siLCJjb25zb2xlIiwid2FybiIsIlBlcmZvcm0iLCJwZXJmb3JtIiwidGljayIsInRhZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1hcCIsInJlY2VpdmUiLCJhY3Rpb24iLCJmeCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImJhdGNoIiwiZWZmZWN0cyIsIkJhdGNoIiwiZiIsImV4ZWN1dGUiLCJhZGRyZXNzIiwiY29uc3RydWN0b3IiLCJjaGFpbiIsInZhbHVlIiwic2VuZCIsIk5vbmUiLCJub25lIiwiZWZmZWN0IiwiY291bnQiLCJsZW5ndGgiLCJpbmRleCIsImZvcmsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBLFFBQU1BLFFBQVFDLFNBQVM7QUFDckIsVUFBTUMsTUFDSCxrRkFBaUZELEtBQU0sRUFEcEYsQ0FBTjtBQUdELEdBSkQ7O0FBTUEsUUFBTUUsU0FBU0MsS0FBSyxLQUFLLENBQXpCOztBQUVBLFFBQU1DLE1BQU0sV0FBS0MsT0FBTCxDQUFhLEtBQUssQ0FBbEIsQ0FBWjs7QUFFQSxRQUFNQyxRQUFRLGVBQVMsQ0FBQ0QsT0FBRCxFQUFVRSxJQUFWLEtBQW1CLEtBQUssQ0FBakMsQ0FBZDs7QUFFTyxRQUFNQyxPQUFOLENBQWlCO0FBQ3RCLFdBQU9DLElBQVAsQ0FBZUEsSUFBZixFQUFpRDtBQUMvQ0MsY0FBUUMsSUFBUixDQUNFLCtEQURGO0FBR0EsYUFBTyxJQUFJQyxPQUFKLENBQVlILElBQVosQ0FBUDtBQUNEO0FBQ0QsV0FBT0ksT0FBUCxDQUFrQkosSUFBbEIsRUFBb0Q7QUFDbEQsYUFBTyxJQUFJRyxPQUFKLENBQVlILElBQVosQ0FBUDtBQUNEO0FBQ0QsV0FBT0ssSUFBUCxDQUFlQyxHQUFmLEVBQXFEO0FBQ25ETCxjQUFRQyxJQUFSLENBQ0Usc0dBREY7QUFHQSxhQUFPLElBQUlDLE9BQUosQ0FBWSxXQUFLSSxxQkFBTCxHQUE2QkMsR0FBN0IsQ0FBaUNGLEdBQWpDLENBQVosQ0FBUDtBQUNEO0FBQ0QsV0FBT0csT0FBUCxDQUFrQkMsTUFBbEIsRUFBeUM7QUFDdkMsWUFBTUMsS0FBSyxJQUFJUixPQUFKLENBQ1QsZUFDRSxDQUFDUCxPQUFELEVBQVVFLElBQVYsS0FBbUIsS0FBS2MsUUFBUUMsT0FBUixDQUFnQkgsTUFBaEIsRUFBd0JJLElBQXhCLENBQTZCbEIsT0FBN0IsRUFBc0NFLElBQXRDLENBRDFCLENBRFMsQ0FBWDtBQUtBLGFBQU9hLEVBQVA7QUFDRDtBQUNELFdBQU9JLEtBQVAsQ0FBZ0JDLE9BQWhCLEVBQXdEO0FBQ3RELGFBQU8sSUFBSUMsS0FBSixDQUFVRCxPQUFWLENBQVA7QUFDRDtBQUNEUixRQUFPVSxDQUFQLEVBQW1DO0FBQ2pDLFlBQU0xQixNQUFNLGdEQUFOLENBQU47QUFDRDtBQUNEMkIsWUFBUUMsT0FBUixFQUFnRDtBQUM5QyxZQUFNNUIsTUFBTSxvREFBTixDQUFOO0FBQ0Q7QUFoQ3FCOztVQUFYTyxPLEdBQUFBLE87QUFxQ2IsUUFBTUksT0FBTixTQUF5QkosT0FBekIsQ0FBb0M7QUFDbENzQixnQkFBWXJCLElBQVosRUFBa0M7QUFDaEM7QUFDQSxXQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDRDtBQUNEUSxRQUFPVSxDQUFQLEVBQW1DO0FBQ2pDLGFBQU8sSUFBSWYsT0FBSixDQUFZLEtBQUtILElBQUwsQ0FBVVEsR0FBVixDQUFjVSxDQUFkLENBQVosQ0FBUDtBQUNEO0FBQ0RDLFlBQVFDLE9BQVIsRUFBZ0Q7QUFDOUMsYUFBTyxLQUFLcEIsSUFBTCxDQUFVc0IsS0FBVixDQUFnQkMsU0FBUyxXQUFLQyxJQUFMLENBQVVKLE9BQVYsRUFBbUJHLEtBQW5CLENBQXpCLENBQVA7QUFDRDtBQVZpQzs7QUFhcEMsUUFBTUUsSUFBTixTQUFzQjFCLE9BQXRCLENBQW1DO0FBQ2pDUyxRQUFPVSxDQUFQLEVBQW1DO0FBQ2pDLGFBQU9uQixRQUFRMkIsSUFBZjtBQUNEO0FBQ0RQLFlBQVFDLE9BQVIsRUFBZ0Q7QUFDOUMsYUFBT3pCLEdBQVA7QUFDRDtBQU5nQztBQVFuQ0ksVUFBUTJCLElBQVIsR0FBZSxJQUFJRCxJQUFKLEVBQWY7O0FBRUEsUUFBTVIsS0FBTixTQUF1QmxCLE9BQXZCLENBQWtDO0FBQ2hDc0IsZ0JBQVlMLE9BQVosRUFBd0M7QUFDdEM7QUFDQSxXQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUNEUixRQUFPVSxDQUFQLEVBQW1DO0FBQ2pDLGFBQU8sSUFBSUQsS0FBSixDQUFVLEtBQUtELE9BQUwsQ0FBYVIsR0FBYixDQUFpQm1CLFVBQVVBLE9BQU9uQixHQUFQLENBQVdVLENBQVgsQ0FBM0IsQ0FBVixDQUFQO0FBQ0Q7QUFDREMsWUFBUUMsT0FBUixFQUFnRDtBQUM5QyxhQUFPLGVBQVMsQ0FBQ3hCLE9BQUQsRUFBVUUsSUFBVixLQUFtQjtBQUNqQyxjQUFNLEVBQUVrQixPQUFGLEtBQWMsSUFBcEI7QUFDQSxjQUFNWSxRQUFRWixRQUFRYSxNQUF0QjtBQUNBLFlBQUlDLFFBQVEsQ0FBWjtBQUNBLGVBQU9BLFFBQVFGLEtBQWYsRUFBc0I7QUFDcEIsZ0JBQU1ELFNBQVNYLFFBQVFjLEtBQVIsQ0FBZjtBQUNBLGNBQUksRUFBRUgsa0JBQWtCRixJQUFwQixDQUFKLEVBQStCO0FBQzdCLHVCQUFLTSxJQUFMLENBQVVKLE9BQU9SLE9BQVAsQ0FBZUMsT0FBZixDQUFWLEVBQW1DM0IsTUFBbkMsRUFBMkNILEtBQTNDO0FBQ0Q7O0FBRUR3QyxrQkFBUUEsUUFBUSxDQUFoQjtBQUNEO0FBQ0RsQyxnQkFBUSxLQUFLLENBQWI7QUFDRCxPQWJNLENBQVA7QUFjRDs7QUF2QitCIiwiZmlsZSI6ImVmZmVjdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSBcIi4vdGFza1wiXG5cbmltcG9ydCB0eXBlIHsgQWRkcmVzcyB9IGZyb20gXCIuL2RyaXZlclwiXG5cbmV4cG9ydCB0eXBlIFRpbWUgPSBudW1iZXJcblxuZXhwb3J0IHR5cGUgTmV2ZXIgPSBudW1iZXIgJiBzdHJpbmdcblxuY29uc3QgcmFpc2UgPSBlcnJvciA9PiB7XG4gIHRocm93IEVycm9yKFxuICAgIGBFZmZlY3RzIHNob3VsZCBiZSBjcmVhdGVkIGZyb20gdGFzayB0aGF0IG5ldmVyIGZhaWwgYnV0IGl0IGRpZCBmYWlsIHdpdGggZXJyb3IgJHtlcnJvcn1gXG4gIClcbn1cblxuY29uc3QgaWdub3JlID0gXyA9PiB2b2lkIDBcblxuY29uc3QgbmlsID0gVGFzay5zdWNjZWVkKHZvaWQgMClcblxuY29uc3QgbmV2ZXIgPSBuZXcgVGFzaygoc3VjY2VlZCwgZmFpbCkgPT4gdm9pZCAwKVxuXG5leHBvcnQgY2xhc3MgRWZmZWN0czxhPiB7XG4gIHN0YXRpYyB0YXNrPGE+KHRhc2s6IFRhc2s8TmV2ZXIsIGE+KTogRWZmZWN0czxhPiB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJFZmZlY3RzLnRhc2sgaXMgZGVwcmVjYXRlZCBwbGVhc2UgdXNlIEVmZmVjdHMucGVyZm9ybSBpbnN0ZWFkXCJcbiAgICApXG4gICAgcmV0dXJuIG5ldyBQZXJmb3JtKHRhc2spXG4gIH1cbiAgc3RhdGljIHBlcmZvcm08YT4odGFzazogVGFzazxOZXZlciwgYT4pOiBFZmZlY3RzPGE+IHtcbiAgICByZXR1cm4gbmV3IFBlcmZvcm0odGFzaylcbiAgfVxuICBzdGF0aWMgdGljazxhPih0YWc6ICh0aW1lOiBudW1iZXIpID0+IGEpOiBFZmZlY3RzPGE+IHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIkVmZmVjdHMudGljayBpcyBkZXByZWNhdGVkIHBsZWFzZSB1c2UgRWZmZWN0cy5wZXJmb3JtKFRhc2sucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkubWFwKHRhZykpIGluc3RlYWRcIlxuICAgIClcbiAgICByZXR1cm4gbmV3IFBlcmZvcm0oVGFzay5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKS5tYXAodGFnKSlcbiAgfVxuICBzdGF0aWMgcmVjZWl2ZTxhPihhY3Rpb246IGEpOiBFZmZlY3RzPGE+IHtcbiAgICBjb25zdCBmeCA9IG5ldyBQZXJmb3JtKFxuICAgICAgbmV3IFRhc2soXG4gICAgICAgIChzdWNjZWVkLCBmYWlsKSA9PiB2b2lkIFByb21pc2UucmVzb2x2ZShhY3Rpb24pLnRoZW4oc3VjY2VlZCwgZmFpbClcbiAgICAgIClcbiAgICApXG4gICAgcmV0dXJuIGZ4XG4gIH1cbiAgc3RhdGljIGJhdGNoPGE+KGVmZmVjdHM6IEFycmF5PEVmZmVjdHM8YT4+KTogRWZmZWN0czxhPiB7XG4gICAgcmV0dXJuIG5ldyBCYXRjaChlZmZlY3RzKVxuICB9XG4gIG1hcDxiPihmOiAoYTogYSkgPT4gYik6IEVmZmVjdHM8Yj4ge1xuICAgIHRocm93IEVycm9yKFwiU3ViY2xhc3Mgb2YgYWJzdHJhY3QgRWZmZWN0IG11c3QgaW1wbGVtZW50IG1hcFwiKVxuICB9XG4gIGV4ZWN1dGUoYWRkcmVzczogQWRkcmVzczxhPik6IFRhc2s8TmV2ZXIsIHZvaWQ+IHtcbiAgICB0aHJvdyBFcnJvcihcIlN1YmNsYXNzIG9mIGFic3RyYWN0IEVmZmVjdCBtdXN0IGltcGxlbWVudCBleGVjdXRlXCIpXG4gIH1cbiAgc3RhdGljIG5vbmU6IEVmZmVjdHM8YW55PlxuICB0YXNrOiBUYXNrPE5ldmVyLCBhPlxufVxuXG5jbGFzcyBQZXJmb3JtPGE+IGV4dGVuZHMgRWZmZWN0czxhPiB7XG4gIGNvbnN0cnVjdG9yKHRhc2s6IFRhc2s8TmV2ZXIsIGE+KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudGFzayA9IHRhc2tcbiAgfVxuICBtYXA8Yj4oZjogKGE6IGEpID0+IGIpOiBFZmZlY3RzPGI+IHtcbiAgICByZXR1cm4gbmV3IFBlcmZvcm0odGhpcy50YXNrLm1hcChmKSlcbiAgfVxuICBleGVjdXRlKGFkZHJlc3M6IEFkZHJlc3M8YT4pOiBUYXNrPE5ldmVyLCB2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudGFzay5jaGFpbih2YWx1ZSA9PiBUYXNrLnNlbmQoYWRkcmVzcywgdmFsdWUpKVxuICB9XG59XG5cbmNsYXNzIE5vbmU8YT4gZXh0ZW5kcyBFZmZlY3RzPGFueT4ge1xuICBtYXA8Yj4oZjogKGE6IGEpID0+IGIpOiBFZmZlY3RzPGI+IHtcbiAgICByZXR1cm4gRWZmZWN0cy5ub25lXG4gIH1cbiAgZXhlY3V0ZShhZGRyZXNzOiBBZGRyZXNzPGE+KTogVGFzazxOZXZlciwgdm9pZD4ge1xuICAgIHJldHVybiBuaWxcbiAgfVxufVxuRWZmZWN0cy5ub25lID0gbmV3IE5vbmUoKVxuXG5jbGFzcyBCYXRjaDxhPiBleHRlbmRzIEVmZmVjdHM8YT4ge1xuICBjb25zdHJ1Y3RvcihlZmZlY3RzOiBBcnJheTxFZmZlY3RzPGE+Pikge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmVmZmVjdHMgPSBlZmZlY3RzXG4gIH1cbiAgbWFwPGI+KGY6IChhOiBhKSA9PiBiKTogRWZmZWN0czxiPiB7XG4gICAgcmV0dXJuIG5ldyBCYXRjaCh0aGlzLmVmZmVjdHMubWFwKGVmZmVjdCA9PiBlZmZlY3QubWFwKGYpKSlcbiAgfVxuICBleGVjdXRlKGFkZHJlc3M6IEFkZHJlc3M8YT4pOiBUYXNrPE5ldmVyLCB2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBUYXNrKChzdWNjZWVkLCBmYWlsKSA9PiB7XG4gICAgICBjb25zdCB7IGVmZmVjdHMgfSA9IHRoaXNcbiAgICAgIGNvbnN0IGNvdW50ID0gZWZmZWN0cy5sZW5ndGhcbiAgICAgIGxldCBpbmRleCA9IDBcbiAgICAgIHdoaWxlIChpbmRleCA8IGNvdW50KSB7XG4gICAgICAgIGNvbnN0IGVmZmVjdCA9IGVmZmVjdHNbaW5kZXhdXG4gICAgICAgIGlmICghKGVmZmVjdCBpbnN0YW5jZW9mIE5vbmUpKSB7XG4gICAgICAgICAgVGFzay5mb3JrKGVmZmVjdC5leGVjdXRlKGFkZHJlc3MpLCBpZ25vcmUsIHJhaXNlKVxuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBpbmRleCArIDFcbiAgICAgIH1cbiAgICAgIHN1Y2NlZWQodm9pZCAwKVxuICAgIH0pXG4gIH1cblxuICBlZmZlY3RzOiBBcnJheTxFZmZlY3RzPGE+PlxufVxuIl19
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./dom"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./dom"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.dom);
    global.html = mod.exports;
  }
})(this, function (exports, _dom) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.html = undefined;
  const html = exports.html = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"].reduce((html, tagName) => {
    const element = (properties, children) => (0, _dom.node)(tagName, properties, children);

    html[tagName] = element;
    return html;
  }, (
  // @Hack: Workarounding facebook/flow#1683
  Object.create(null), {}));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./driver", "./signal", "./subscription", "./dom", "./html", "./application", "./task", "./effects"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./driver"), require("./signal"), require("./subscription"), require("./dom"), require("./html"), require("./application"), require("./task"), require("./effects"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.driver, global.signal, global.subscription, global.dom, global.html, global.application, global.task, global.effects);
    global.index = mod.exports;
  }
})(this, function (exports, _driver, _signal, _subscription, _dom, _html, _application, _task, _effects) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Subscription = exports.Driver = exports.Effects = exports.Task = exports.beginner = exports.start = exports.html = exports.root = exports.thunk = exports.text = exports.node = exports.subscription = exports.forward = exports.VirtualRoot = exports.Address = exports.VirtualTree = exports.LazyTree = exports.Widget = exports.Thunk = exports.VirtualNode = exports.VirtualText = exports.StyleDictionary = exports.AttributeDictionary = exports.PropertyDictionary = undefined;
  Object.defineProperty(exports, "PropertyDictionary", {
    enumerable: true,
    get: function () {
      return _driver.PropertyDictionary;
    }
  });
  Object.defineProperty(exports, "AttributeDictionary", {
    enumerable: true,
    get: function () {
      return _driver.AttributeDictionary;
    }
  });
  Object.defineProperty(exports, "StyleDictionary", {
    enumerable: true,
    get: function () {
      return _driver.StyleDictionary;
    }
  });
  Object.defineProperty(exports, "VirtualText", {
    enumerable: true,
    get: function () {
      return _driver.VirtualText;
    }
  });
  Object.defineProperty(exports, "VirtualNode", {
    enumerable: true,
    get: function () {
      return _driver.VirtualNode;
    }
  });
  Object.defineProperty(exports, "Thunk", {
    enumerable: true,
    get: function () {
      return _driver.Thunk;
    }
  });
  Object.defineProperty(exports, "Widget", {
    enumerable: true,
    get: function () {
      return _driver.Widget;
    }
  });
  Object.defineProperty(exports, "LazyTree", {
    enumerable: true,
    get: function () {
      return _driver.LazyTree;
    }
  });
  Object.defineProperty(exports, "VirtualTree", {
    enumerable: true,
    get: function () {
      return _driver.VirtualTree;
    }
  });
  Object.defineProperty(exports, "Address", {
    enumerable: true,
    get: function () {
      return _driver.Address;
    }
  });
  Object.defineProperty(exports, "VirtualRoot", {
    enumerable: true,
    get: function () {
      return _driver.VirtualRoot;
    }
  });
  Object.defineProperty(exports, "forward", {
    enumerable: true,
    get: function () {
      return _signal.forward;
    }
  });
  Object.defineProperty(exports, "subscription", {
    enumerable: true,
    get: function () {
      return _subscription.subscription;
    }
  });
  Object.defineProperty(exports, "node", {
    enumerable: true,
    get: function () {
      return _dom.node;
    }
  });
  Object.defineProperty(exports, "text", {
    enumerable: true,
    get: function () {
      return _dom.text;
    }
  });
  Object.defineProperty(exports, "thunk", {
    enumerable: true,
    get: function () {
      return _dom.thunk;
    }
  });
  Object.defineProperty(exports, "root", {
    enumerable: true,
    get: function () {
      return _dom.root;
    }
  });
  Object.defineProperty(exports, "html", {
    enumerable: true,
    get: function () {
      return _html.html;
    }
  });
  Object.defineProperty(exports, "start", {
    enumerable: true,
    get: function () {
      return _application.start;
    }
  });
  Object.defineProperty(exports, "beginner", {
    enumerable: true,
    get: function () {
      return _application.beginner;
    }
  });
  Object.defineProperty(exports, "Task", {
    enumerable: true,
    get: function () {
      return _task.Task;
    }
  });
  Object.defineProperty(exports, "Effects", {
    enumerable: true,
    get: function () {
      return _effects.Effects;
    }
  });

  var Driver = _interopRequireWildcard(_driver);

  var Subscription = _interopRequireWildcard(_subscription);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  exports.Driver = Driver;
  exports.Subscription = Subscription;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQcm9wZXJ0eURpY3Rpb25hcnkiLCJBdHRyaWJ1dGVEaWN0aW9uYXJ5IiwiU3R5bGVEaWN0aW9uYXJ5IiwiVmlydHVhbFRleHQiLCJWaXJ0dWFsTm9kZSIsIlRodW5rIiwiV2lkZ2V0IiwiTGF6eVRyZWUiLCJWaXJ0dWFsVHJlZSIsIkFkZHJlc3MiLCJWaXJ0dWFsUm9vdCIsImZvcndhcmQiLCJzdWJzY3JpcHRpb24iLCJub2RlIiwidGV4dCIsInRodW5rIiwicm9vdCIsImh0bWwiLCJzdGFydCIsImJlZ2lubmVyIiwiVGFzayIsIkVmZmVjdHMiLCJEcml2ZXIiLCJTdWJzY3JpcHRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBTUVBLGtCOzs7Ozs7cUJBQ0FDLG1COzs7Ozs7cUJBQ0FDLGU7Ozs7OztxQkFDQUMsVzs7Ozs7O3FCQUNBQyxXOzs7Ozs7cUJBQ0FDLEs7Ozs7OztxQkFDQUMsTTs7Ozs7O3FCQUNBQyxROzs7Ozs7cUJBQ0FDLFc7Ozs7OztxQkFDQUMsTzs7Ozs7O3FCQUNBQyxXOzs7Ozs7cUJBWU9DLE87Ozs7OzsyQkFDQUMsWTs7Ozs7O2tCQUNBQyxJOzs7Ozs7a0JBQU1DLEk7Ozs7OztrQkFBTUMsSzs7Ozs7O2tCQUFPQyxJOzs7Ozs7bUJBQ25CQyxJOzs7Ozs7MEJBQ0FDLEs7Ozs7OzswQkFBT0MsUTs7Ozs7O21CQUNQQyxJOzs7Ozs7c0JBQ0FDLE87Ozs7TUFoQ0dDLE07O01BQ0FDLFk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFpQ0hELE0sR0FBQUEsTTtVQUFRQyxZLEdBQUFBLFkiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBEcml2ZXIgZnJvbSBcIi4vZHJpdmVyXCJcbmltcG9ydCAqIGFzIFN1YnNjcmlwdGlvbiBmcm9tIFwiLi9zdWJzY3JpcHRpb25cIlxuXG5leHBvcnQge1xuICBQcm9wZXJ0eURpY3Rpb25hcnksXG4gIEF0dHJpYnV0ZURpY3Rpb25hcnksXG4gIFN0eWxlRGljdGlvbmFyeSxcbiAgVmlydHVhbFRleHQsXG4gIFZpcnR1YWxOb2RlLFxuICBUaHVuayxcbiAgV2lkZ2V0LFxuICBMYXp5VHJlZSxcbiAgVmlydHVhbFRyZWUsXG4gIEFkZHJlc3MsXG4gIFZpcnR1YWxSb290XG59IGZyb20gXCIuL2RyaXZlclwiXG5cbmV4cG9ydCB0eXBlIHtcbiAgQXBwbGljYXRpb24sXG4gIEFkdmFuY2VkQ29uZmlndXJhdGlvbixcbiAgQmVnaW5uZXJDb25maWd1cmF0aW9uXG59IGZyb20gXCIuL2FwcGxpY2F0aW9uXCJcbmV4cG9ydCB0eXBlIHsgSW5pdCwgVXBkYXRlLCBWaWV3IH0gZnJvbSBcIi4vYXBwbGljYXRpb25cIlxuZXhwb3J0IHR5cGUgeyBET00gfSBmcm9tIFwiLi9kb21cIlxuZXhwb3J0IHR5cGUgeyBOZXZlciB9IGZyb20gXCIuL2VmZmVjdHNcIlxuXG5leHBvcnQgeyBmb3J3YXJkIH0gZnJvbSBcIi4vc2lnbmFsXCJcbmV4cG9ydCB7IHN1YnNjcmlwdGlvbiB9IGZyb20gXCIuL3N1YnNjcmlwdGlvblwiXG5leHBvcnQgeyBub2RlLCB0ZXh0LCB0aHVuaywgcm9vdCB9IGZyb20gXCIuL2RvbVwiXG5leHBvcnQgeyBodG1sIH0gZnJvbSBcIi4vaHRtbFwiXG5leHBvcnQgeyBzdGFydCwgYmVnaW5uZXIgfSBmcm9tIFwiLi9hcHBsaWNhdGlvblwiXG5leHBvcnQgeyBUYXNrIH0gZnJvbSBcIi4vdGFza1wiXG5leHBvcnQgeyBFZmZlY3RzIH0gZnJvbSBcIi4vZWZmZWN0c1wiXG5cbmV4cG9ydCB7IERyaXZlciwgU3Vic2NyaXB0aW9uIH1cbiJdfQ==
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.preemptiveAnimationFrame = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  // Invariants:
  // 1. In the NO_REQUEST state, there is never a scheduled animation frame.
  // 2. In the PENDING_REQUEST and EXTRA_REQUEST states, there is always exactly
  // one scheduled animation frame.
  const NO_REQUEST = 0;
  const PENDING_REQUEST = 1;
  const EXTRA_REQUEST = 2;

  let nextID = 0;
  let state = NO_REQUEST;
  let requests = [];
  let ids = [];

  const absent = new String("absent");

  const requestAnimationFrame = exports.requestAnimationFrame = request => {
    if (state === NO_REQUEST) {
      window.requestAnimationFrame(performAnimationFrame);
    }

    const id = ++nextID;
    requests.push(request);
    ids.push(id);
    state = PENDING_REQUEST;
    return id;
  };

  const cancelAnimationFrame = exports.cancelAnimationFrame = id => {
    const index = ids.indexOf(id);
    if (index >= 0) {
      ids.splice(index, 1);
      requests.splice(index, 1);
    }
  };

  const forceAnimationFrame = exports.forceAnimationFrame = (time = window.performance.now()) => performAnimationFrame(time);

  const performAnimationFrame = time => {
    switch (state) {
      case NO_REQUEST:
        // This state should not be possible. How can there be no
        // request, yet somehow we are actively fulfilling a
        // request?
        throw Error(`Unexpected frame request`);
      case PENDING_REQUEST:
        // At this point, we do not *know* that another frame is
        // needed, but we make an extra frame request just in
        // case. It's possible to drop a frame if frame is requested
        // too late, so we just do it preemptively.
        window.requestAnimationFrame(performAnimationFrame);
        state = EXTRA_REQUEST;
        ids.splice(0);
        dispatchAnimationFrame(requests.splice(0), 0, time);
        break;
      case EXTRA_REQUEST:
        // Turns out the extra request was not needed, so we will
        // stop requesting. No reason to call it all the time if
        // no one needs it.
        state = NO_REQUEST;
        break;
    }
  };

  const dispatchAnimationFrame = (requests, index, time) => {
    let exception = absent;
    const count = requests.length;
    try {
      while (index < count) {
        const request = requests[index];
        index = index + 1;
        request(time);
      }
    } catch (error) {
      exception = error;
    }

    if (index < count) {
      dispatchAnimationFrame(requests, index, time);
    }

    if (exception != absent) {
      throw exception;
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcmVlbXB0aXZlLWFuaW1hdGlvbi1mcmFtZS5qcyJdLCJuYW1lcyI6WyJOT19SRVFVRVNUIiwiUEVORElOR19SRVFVRVNUIiwiRVhUUkFfUkVRVUVTVCIsIm5leHRJRCIsInN0YXRlIiwicmVxdWVzdHMiLCJpZHMiLCJhYnNlbnQiLCJTdHJpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0Iiwid2luZG93IiwicGVyZm9ybUFuaW1hdGlvbkZyYW1lIiwiaWQiLCJwdXNoIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJmb3JjZUFuaW1hdGlvbkZyYW1lIiwidGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiRXJyb3IiLCJkaXNwYXRjaEFuaW1hdGlvbkZyYW1lIiwiZXhjZXB0aW9uIiwiY291bnQiLCJsZW5ndGgiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU1BLGFBQWEsQ0FBbkI7QUFDQSxRQUFNQyxrQkFBa0IsQ0FBeEI7QUFDQSxRQUFNQyxnQkFBZ0IsQ0FBdEI7O0FBRUEsTUFBSUMsU0FBaUIsQ0FBckI7QUFDQSxNQUFJQyxRQUFlSixVQUFuQjtBQUNBLE1BQUlLLFdBQXVDLEVBQTNDO0FBQ0EsTUFBSUMsTUFBcUIsRUFBekI7O0FBRUEsUUFBTUMsU0FBUyxJQUFJQyxNQUFKLENBQVcsUUFBWCxDQUFmOztBQUVPLFFBQU1DLHdEQUE0QkMsT0FBSixJQUFtQztBQUN0RSxRQUFJTixVQUFVSixVQUFkLEVBQTBCO0FBQ3hCVyxhQUFPRixxQkFBUCxDQUE2QkcscUJBQTdCO0FBQ0Q7O0FBRUQsVUFBTUMsS0FBSyxFQUFFVixNQUFiO0FBQ0FFLGFBQVNTLElBQVQsQ0FBY0osT0FBZDtBQUNBSixRQUFJUSxJQUFKLENBQVNELEVBQVQ7QUFDQVQsWUFBUUgsZUFBUjtBQUNBLFdBQU9ZLEVBQVA7QUFDRCxHQVZNOztBQVlBLFFBQU1FLHNEQUF3QkYsRUFBRCxJQUFzQjtBQUN4RCxVQUFNRyxRQUFRVixJQUFJVyxPQUFKLENBQVlKLEVBQVosQ0FBZDtBQUNBLFFBQUlHLFNBQVMsQ0FBYixFQUFnQjtBQUNkVixVQUFJWSxNQUFKLENBQVdGLEtBQVgsRUFBa0IsQ0FBbEI7QUFDQVgsZUFBU2EsTUFBVCxDQUFnQkYsS0FBaEIsRUFBdUIsQ0FBdkI7QUFDRDtBQUNGLEdBTk07O0FBUUEsUUFBTUcsb0RBQXNCLENBQUNDLE9BQWFULE9BQU9VLFdBQVAsQ0FBbUJDLEdBQW5CLEVBQWQsS0FDakNWLHNCQUFzQlEsSUFBdEIsQ0FESzs7QUFHUCxRQUFNUix3QkFBeUJRLElBQUQsSUFBZ0I7QUFDNUMsWUFBUWhCLEtBQVI7QUFDRSxXQUFLSixVQUFMO0FBQ0U7QUFDQTtBQUNBO0FBQ0EsY0FBTXVCLE1BQU8sMEJBQVAsQ0FBTjtBQUNGLFdBQUt0QixlQUFMO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQVUsZUFBT0YscUJBQVAsQ0FBNkJHLHFCQUE3QjtBQUNBUixnQkFBUUYsYUFBUjtBQUNBSSxZQUFJWSxNQUFKLENBQVcsQ0FBWDtBQUNBTSwrQkFBdUJuQixTQUFTYSxNQUFULENBQWdCLENBQWhCLENBQXZCLEVBQTJDLENBQTNDLEVBQThDRSxJQUE5QztBQUNBO0FBQ0YsV0FBS2xCLGFBQUw7QUFDRTtBQUNBO0FBQ0E7QUFDQUUsZ0JBQVFKLFVBQVI7QUFDQTtBQXJCSjtBQXVCRCxHQXhCRDs7QUEwQkEsUUFBTXdCLHlCQUF5QixDQUM3Qm5CLFFBRDZCLEVBRTdCVyxLQUY2QixFQUc3QkksSUFINkIsS0FJMUI7QUFDSCxRQUFJSyxZQUE0QmxCLE1BQWhDO0FBQ0EsVUFBTW1CLFFBQVFyQixTQUFTc0IsTUFBdkI7QUFDQSxRQUFJO0FBQ0YsYUFBT1gsUUFBUVUsS0FBZixFQUFzQjtBQUNwQixjQUFNaEIsVUFBVUwsU0FBU1csS0FBVCxDQUFoQjtBQUNBQSxnQkFBUUEsUUFBUSxDQUFoQjtBQUNBTixnQkFBUVUsSUFBUjtBQUNEO0FBQ0YsS0FORCxDQU1FLE9BQU9RLEtBQVAsRUFBYztBQUNkSCxrQkFBWUcsS0FBWjtBQUNEOztBQUVELFFBQUlaLFFBQVFVLEtBQVosRUFBbUI7QUFDakJGLDZCQUF1Qm5CLFFBQXZCLEVBQWlDVyxLQUFqQyxFQUF3Q0ksSUFBeEM7QUFDRDs7QUFFRCxRQUFJSyxhQUFhbEIsTUFBakIsRUFBeUI7QUFDdkIsWUFBTWtCLFNBQU47QUFDRDtBQUNGLEdBeEJEIiwiZmlsZSI6InByZWVtcHRpdmUtYW5pbWF0aW9uLWZyYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxudHlwZSBUaW1lID0gbnVtYmVyXG50eXBlIFN0YXRlID0gMCB8IDEgfCAyXG5cbi8vIEludmFyaWFudHM6XG4vLyAxLiBJbiB0aGUgTk9fUkVRVUVTVCBzdGF0ZSwgdGhlcmUgaXMgbmV2ZXIgYSBzY2hlZHVsZWQgYW5pbWF0aW9uIGZyYW1lLlxuLy8gMi4gSW4gdGhlIFBFTkRJTkdfUkVRVUVTVCBhbmQgRVhUUkFfUkVRVUVTVCBzdGF0ZXMsIHRoZXJlIGlzIGFsd2F5cyBleGFjdGx5XG4vLyBvbmUgc2NoZWR1bGVkIGFuaW1hdGlvbiBmcmFtZS5cbmNvbnN0IE5PX1JFUVVFU1QgPSAwXG5jb25zdCBQRU5ESU5HX1JFUVVFU1QgPSAxXG5jb25zdCBFWFRSQV9SRVFVRVNUID0gMlxuXG5sZXQgbmV4dElEOiBudW1iZXIgPSAwXG5sZXQgc3RhdGU6IFN0YXRlID0gTk9fUkVRVUVTVFxubGV0IHJlcXVlc3RzOiBBcnJheTwodGltZTogVGltZSkgPT4gYW55PiA9IFtdXG5sZXQgaWRzOiBBcnJheTxudW1iZXI+ID0gW11cblxuY29uc3QgYWJzZW50ID0gbmV3IFN0cmluZyhcImFic2VudFwiKVxuXG5leHBvcnQgY29uc3QgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gPGE+KHJlcXVlc3Q6ICh0aW1lOiBUaW1lKSA9PiBhKSA9PiB7XG4gIGlmIChzdGF0ZSA9PT0gTk9fUkVRVUVTVCkge1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGVyZm9ybUFuaW1hdGlvbkZyYW1lKVxuICB9XG5cbiAgY29uc3QgaWQgPSArK25leHRJRFxuICByZXF1ZXN0cy5wdXNoKHJlcXVlc3QpXG4gIGlkcy5wdXNoKGlkKVxuICBzdGF0ZSA9IFBFTkRJTkdfUkVRVUVTVFxuICByZXR1cm4gaWRcbn1cblxuZXhwb3J0IGNvbnN0IGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gKGlkOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgY29uc3QgaW5kZXggPSBpZHMuaW5kZXhPZihpZClcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBpZHMuc3BsaWNlKGluZGV4LCAxKVxuICAgIHJlcXVlc3RzLnNwbGljZShpbmRleCwgMSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZm9yY2VBbmltYXRpb25GcmFtZSA9ICh0aW1lOiBUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpKSA9PlxuICBwZXJmb3JtQW5pbWF0aW9uRnJhbWUodGltZSlcblxuY29uc3QgcGVyZm9ybUFuaW1hdGlvbkZyYW1lID0gKHRpbWU6IFRpbWUpID0+IHtcbiAgc3dpdGNoIChzdGF0ZSkge1xuICAgIGNhc2UgTk9fUkVRVUVTVDpcbiAgICAgIC8vIFRoaXMgc3RhdGUgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZS4gSG93IGNhbiB0aGVyZSBiZSBub1xuICAgICAgLy8gcmVxdWVzdCwgeWV0IHNvbWVob3cgd2UgYXJlIGFjdGl2ZWx5IGZ1bGZpbGxpbmcgYVxuICAgICAgLy8gcmVxdWVzdD9cbiAgICAgIHRocm93IEVycm9yKGBVbmV4cGVjdGVkIGZyYW1lIHJlcXVlc3RgKVxuICAgIGNhc2UgUEVORElOR19SRVFVRVNUOlxuICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgZG8gbm90ICprbm93KiB0aGF0IGFub3RoZXIgZnJhbWUgaXNcbiAgICAgIC8vIG5lZWRlZCwgYnV0IHdlIG1ha2UgYW4gZXh0cmEgZnJhbWUgcmVxdWVzdCBqdXN0IGluXG4gICAgICAvLyBjYXNlLiBJdCdzIHBvc3NpYmxlIHRvIGRyb3AgYSBmcmFtZSBpZiBmcmFtZSBpcyByZXF1ZXN0ZWRcbiAgICAgIC8vIHRvbyBsYXRlLCBzbyB3ZSBqdXN0IGRvIGl0IHByZWVtcHRpdmVseS5cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGVyZm9ybUFuaW1hdGlvbkZyYW1lKVxuICAgICAgc3RhdGUgPSBFWFRSQV9SRVFVRVNUXG4gICAgICBpZHMuc3BsaWNlKDApXG4gICAgICBkaXNwYXRjaEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RzLnNwbGljZSgwKSwgMCwgdGltZSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSBFWFRSQV9SRVFVRVNUOlxuICAgICAgLy8gVHVybnMgb3V0IHRoZSBleHRyYSByZXF1ZXN0IHdhcyBub3QgbmVlZGVkLCBzbyB3ZSB3aWxsXG4gICAgICAvLyBzdG9wIHJlcXVlc3RpbmcuIE5vIHJlYXNvbiB0byBjYWxsIGl0IGFsbCB0aGUgdGltZSBpZlxuICAgICAgLy8gbm8gb25lIG5lZWRzIGl0LlxuICAgICAgc3RhdGUgPSBOT19SRVFVRVNUXG4gICAgICBicmVha1xuICB9XG59XG5cbmNvbnN0IGRpc3BhdGNoQW5pbWF0aW9uRnJhbWUgPSA8YT4oXG4gIHJlcXVlc3RzOiBBcnJheTwodGltZTogVGltZSkgPT4gYT4sXG4gIGluZGV4OiBudW1iZXIsXG4gIHRpbWU6IFRpbWVcbikgPT4ge1xuICBsZXQgZXhjZXB0aW9uOiBTdHJpbmcgfCBFcnJvciA9IGFic2VudFxuICBjb25zdCBjb3VudCA9IHJlcXVlc3RzLmxlbmd0aFxuICB0cnkge1xuICAgIHdoaWxlIChpbmRleCA8IGNvdW50KSB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdHNbaW5kZXhdXG4gICAgICBpbmRleCA9IGluZGV4ICsgMVxuICAgICAgcmVxdWVzdCh0aW1lKVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBleGNlcHRpb24gPSBlcnJvclxuICB9XG5cbiAgaWYgKGluZGV4IDwgY291bnQpIHtcbiAgICBkaXNwYXRjaEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RzLCBpbmRleCwgdGltZSlcbiAgfVxuXG4gIGlmIChleGNlcHRpb24gIT0gYWJzZW50KSB7XG4gICAgdGhyb3cgZXhjZXB0aW9uXG4gIH1cbn1cbiJdfQ==
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.signal = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });


  const Forward = (address, tag) => {
    const forward = message => address(tag(message));
    forward.to = address;
    forward.tag = tag;
    return forward;
  };


  if (global["reflex/address"] == null) {
    global["reflex/address"] = 0;
  }

  // Create a new address. This address will tag each message it receives and then
  // forward it along to the given address.
  // Example:
  //
  // const Remove = target => {type: "Remove", target}
  // removeAddress = forward(address, Remove)
  //
  // Above example created `removeAddress` tags each message with `Remove` tag
  // before forwarding them to a general `address`.
  const forward = exports.forward = (address, tag) => {
    // Genrate ID for each address that has a forwarding addresses so that
    // forwarding addresses could be cached by that id and a tag-ing function.
    const id = address.id != null ? address.id : address.id = global["reflex/address"]++;
    const key = `reflex/address/${id}`;

    return tag[key] || (tag[key] = Forward(address, tag));
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaWduYWwuanMiXSwibmFtZXMiOlsiRm9yd2FyZCIsImFkZHJlc3MiLCJ0YWciLCJmb3J3YXJkIiwibWVzc2FnZSIsInRvIiwiZ2xvYmFsIiwiaWQiLCJrZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsUUFBTUEsVUFBVSxDQUFPQyxPQUFQLEVBQTRCQyxHQUE1QixLQUE2RDtBQUMzRSxVQUFNQyxVQUFXQyxPQUFELElBQWdCSCxRQUFRQyxJQUFJRSxPQUFKLENBQVIsQ0FBaEM7QUFDQUQsWUFBUUUsRUFBUixHQUFhSixPQUFiO0FBQ0FFLFlBQVFELEdBQVIsR0FBY0EsR0FBZDtBQUNBLFdBQU9DLE9BQVA7QUFDRCxHQUxEOzs7QUFPQSxNQUFJRyxPQUFPLGdCQUFQLEtBQTRCLElBQWhDLEVBQXNDO0FBQ3BDQSxXQUFPLGdCQUFQLElBQTJCLENBQTNCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sUUFBTUgsNEJBQVUsQ0FDckJGLE9BRHFCLEVBRXJCQyxHQUZxQixLQUdOO0FBQ2Y7QUFDQTtBQUNBLFVBQU1LLEtBQUtOLFFBQVFNLEVBQVIsSUFBYyxJQUFkLEdBQ1BOLFFBQVFNLEVBREQsR0FFTk4sUUFBUU0sRUFBUixHQUFhRCxPQUFPLGdCQUFQLEdBRmxCO0FBR0EsVUFBTUUsTUFBTyxrQkFBaUJELEVBQUcsRUFBakM7O0FBRUEsV0FBT0wsSUFBSU0sR0FBSixNQUFhTixJQUFJTSxHQUFKLElBQVdSLFFBQVFDLE9BQVIsRUFBaUJDLEdBQWpCLENBQXhCLENBQVA7QUFDRCxHQVpNIiwiZmlsZSI6InNpZ25hbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5pbXBvcnQgdHlwZSB7IEFkZHJlc3MgfSBmcm9tIFwiLi9kcml2ZXJcIlxuXG5jb25zdCBGb3J3YXJkID0gPGEsIGI+KGFkZHJlc3M6IEFkZHJlc3M8Yj4sIHRhZzogKGE6IGEpID0+IGIpOiBBZGRyZXNzPGE+ID0+IHtcbiAgY29uc3QgZm9yd2FyZCA9IChtZXNzYWdlOiBhKSA9PiBhZGRyZXNzKHRhZyhtZXNzYWdlKSlcbiAgZm9yd2FyZC50byA9IGFkZHJlc3NcbiAgZm9yd2FyZC50YWcgPSB0YWdcbiAgcmV0dXJuIGZvcndhcmRcbn1cblxuaWYgKGdsb2JhbFtcInJlZmxleC9hZGRyZXNzXCJdID09IG51bGwpIHtcbiAgZ2xvYmFsW1wicmVmbGV4L2FkZHJlc3NcIl0gPSAwXG59XG5cbi8vIENyZWF0ZSBhIG5ldyBhZGRyZXNzLiBUaGlzIGFkZHJlc3Mgd2lsbCB0YWcgZWFjaCBtZXNzYWdlIGl0IHJlY2VpdmVzIGFuZCB0aGVuXG4vLyBmb3J3YXJkIGl0IGFsb25nIHRvIHRoZSBnaXZlbiBhZGRyZXNzLlxuLy8gRXhhbXBsZTpcbi8vXG4vLyBjb25zdCBSZW1vdmUgPSB0YXJnZXQgPT4ge3R5cGU6IFwiUmVtb3ZlXCIsIHRhcmdldH1cbi8vIHJlbW92ZUFkZHJlc3MgPSBmb3J3YXJkKGFkZHJlc3MsIFJlbW92ZSlcbi8vXG4vLyBBYm92ZSBleGFtcGxlIGNyZWF0ZWQgYHJlbW92ZUFkZHJlc3NgIHRhZ3MgZWFjaCBtZXNzYWdlIHdpdGggYFJlbW92ZWAgdGFnXG4vLyBiZWZvcmUgZm9yd2FyZGluZyB0aGVtIHRvIGEgZ2VuZXJhbCBgYWRkcmVzc2AuXG5leHBvcnQgY29uc3QgZm9yd2FyZCA9IDxhLCBiPihcbiAgYWRkcmVzczogQWRkcmVzczxhPixcbiAgdGFnOiAodmFsdWU6IGIpID0+IGFcbik6IEFkZHJlc3M8Yj4gPT4ge1xuICAvLyBHZW5yYXRlIElEIGZvciBlYWNoIGFkZHJlc3MgdGhhdCBoYXMgYSBmb3J3YXJkaW5nIGFkZHJlc3NlcyBzbyB0aGF0XG4gIC8vIGZvcndhcmRpbmcgYWRkcmVzc2VzIGNvdWxkIGJlIGNhY2hlZCBieSB0aGF0IGlkIGFuZCBhIHRhZy1pbmcgZnVuY3Rpb24uXG4gIGNvbnN0IGlkID0gYWRkcmVzcy5pZCAhPSBudWxsXG4gICAgPyBhZGRyZXNzLmlkXG4gICAgOiAoYWRkcmVzcy5pZCA9IGdsb2JhbFtcInJlZmxleC9hZGRyZXNzXCJdKyspXG4gIGNvbnN0IGtleSA9IGByZWZsZXgvYWRkcmVzcy8ke2lkfWBcblxuICByZXR1cm4gdGFnW2tleV0gfHwgKHRhZ1trZXldID0gRm9yd2FyZChhZGRyZXNzLCB0YWcpKVxufVxuIl19
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./Effects"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./Effects"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Effects);
    global.subscription = mod.exports;
  }
})(this, function (exports, _Effects) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.none = exports.batch = exports.subscription = undefined;


  class Subscription {
    map(tag) {
      return this.map(tag);
    }
    reduce(reducer, init) {
      return init;
    }
  }

  class Subscribe extends Subscription {
    constructor(feed, detail, decoder) {
      super();
      this.feed = feed;
      this.detail = detail;
      this.decoder = decoder;
    }
    map(tag) {
      const decoder = value => tag(this.decoder(value));
      return new Subscribe(this.feed, this.detail, decoder);
    }
    reduce(reducer, init) {
      return reducer(init, this);
    }

  }

  class Batch extends Subscription {
    constructor(subscriptions) {
      super();
      this.subscriptions = subscriptions;
    }
    map(tag) {
      const subscriptions = this.subscriptions.map($ => $.map(tag));
      return new Batch(subscriptions);
    }
    reduce(reducer, init) {
      return this.subscriptions.reduce((result, subscription) => subscription.reduce(reducer, result), init);
    }
  }

  const subscription = exports.subscription = (feed, detail, decoder) => new Subscribe(feed, detail, decoder);

  const batch = exports.batch = subscriptions => new Batch(subscriptions);

  const none = exports.none = new Batch([]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdWJzY3JpcHRpb24uanMiXSwibmFtZXMiOlsiU3Vic2NyaXB0aW9uIiwibWFwIiwidGFnIiwicmVkdWNlIiwicmVkdWNlciIsImluaXQiLCJTdWJzY3JpYmUiLCJjb25zdHJ1Y3RvciIsImZlZWQiLCJkZXRhaWwiLCJkZWNvZGVyIiwidmFsdWUiLCJCYXRjaCIsInN1YnNjcmlwdGlvbnMiLCIkIiwicmVzdWx0Iiwic3Vic2NyaXB0aW9uIiwiYmF0Y2giLCJub25lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsUUFBTUEsWUFBTixDQUFzQjtBQUNwQkMsUUFBT0MsR0FBUCxFQUE4QztBQUM1QyxhQUFPLEtBQUtELEdBQUwsQ0FBU0MsR0FBVCxDQUFQO0FBQ0Q7QUFDREMsV0FDRUMsT0FERixFQUVFQyxJQUZGLEVBR1M7QUFDUCxhQUFPQSxJQUFQO0FBQ0Q7QUFUbUI7O0FBWXRCLFFBQU1DLFNBQU4sU0FBaUROLFlBQWpELENBQWlFO0FBQy9ETyxnQkFDRUMsSUFERixFQUVFQyxNQUZGLEVBR0VDLE9BSEYsRUFJRTtBQUNBO0FBQ0EsV0FBS0YsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsV0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsV0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0Q7QUFDRFQsUUFBT0MsR0FBUCxFQUE4QztBQUM1QyxZQUFNUSxVQUFXQyxLQUFELElBQWtCVCxJQUFJLEtBQUtRLE9BQUwsQ0FBYUMsS0FBYixDQUFKLENBQWxDO0FBQ0EsYUFBTyxJQUFJTCxTQUFKLENBQWMsS0FBS0UsSUFBbkIsRUFBeUIsS0FBS0MsTUFBOUIsRUFBc0NDLE9BQXRDLENBQVA7QUFDRDtBQUNEUCxXQUNFQyxPQURGLEVBS0VDLElBTEYsRUFNUztBQUNQLGFBQU9ELFFBQVFDLElBQVIsRUFBYyxJQUFkLENBQVA7QUFDRDs7QUF2QjhEOztBQThCakUsUUFBTU8sS0FBTixTQUF1QlosWUFBdkIsQ0FBdUM7QUFDckNPLGdCQUFZTSxhQUFaLEVBQW1EO0FBQ2pEO0FBQ0EsV0FBS0EsYUFBTCxHQUFxQkEsYUFBckI7QUFDRDtBQUNEWixRQUFPQyxHQUFQLEVBQThDO0FBQzVDLFlBQU1XLGdCQUFnQixLQUFLQSxhQUFMLENBQW1CWixHQUFuQixDQUF1QmEsS0FBS0EsRUFBRWIsR0FBRixDQUFNQyxHQUFOLENBQTVCLENBQXRCO0FBQ0EsYUFBTyxJQUFJVSxLQUFKLENBQVVDLGFBQVYsQ0FBUDtBQUNEO0FBQ0RWLFdBQ0VDLE9BREYsRUFFRUMsSUFGRixFQUdTO0FBQ1AsYUFBTyxLQUFLUSxhQUFMLENBQW1CVixNQUFuQixDQUNMLENBQUNZLE1BQUQsRUFBZ0JDLFlBQWhCLEtBQ0VBLGFBQWFiLE1BQWIsQ0FBb0JDLE9BQXBCLEVBQTZCVyxNQUE3QixDQUZHLEVBR0xWLElBSEssQ0FBUDtBQUtEO0FBbEJvQzs7QUFzQmhDLFFBQU1XLHNDQUFlLENBQzFCUixJQUQwQixFQUUxQkMsTUFGMEIsRUFHMUJDLE9BSDBCLEtBSU4sSUFBSUosU0FBSixDQUFjRSxJQUFkLEVBQW9CQyxNQUFwQixFQUE0QkMsT0FBNUIsQ0FKZjs7QUFNQSxRQUFNTyx3QkFDWEosYUFEbUIsSUFFQyxJQUFJRCxLQUFKLENBQVVDLGFBQVYsQ0FGZjs7QUFJQSxRQUFNSyxzQkFBMEIsSUFBSU4sS0FBSixDQUFVLEVBQVYsQ0FBaEMiLCJmaWxlIjoic3Vic2NyaXB0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHsgRWZmZWN0cyB9IGZyb20gXCIuL0VmZmVjdHNcIlxuXG50eXBlIERlY29kZXI8YT4gPSAodmFsdWU6IG1peGVkKSA9PiBhXG5cbmV4cG9ydCB0eXBlIFNlcnZpY2U8bWVzc2FnZSwgYWN0aW9uLCBtb2RlbD4gPSB7XG4gIHN1YnNjcmlwdGlvbnM6IEFycmF5PFN1YnNjcmlwdGlvbjxtZXNzYWdlPj4sXG4gIHN0YXRlOiBtb2RlbCxcbiAgZmVlZDogRmVlZDxtZXNzYWdlLCBhY3Rpb24sIG1vZGVsPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZlZWQ8bWVzc2FnZSwgYWN0aW9uLCBtb2RlbD4ge1xuICBpbml0KCk6IG1vZGVsLFxuICBzdWJzY3JpYmUoc3Vic2NyaWJlcnM6IEFycmF5PGFjdGlvbj4pOiBhY3Rpb24sXG4gIHVwZGF0ZShzdGF0ZTogbW9kZWwsIHBheWxvYWQ6IGFjdGlvbik6IFttb2RlbCwgRWZmZWN0czxtZXNzYWdlPl0sXG4gIGFkZHJlc3M/OiBzdHJpbmdcbn1cblxuY2xhc3MgU3Vic2NyaXB0aW9uPGE+IHtcbiAgbWFwPGI+KHRhZzogKHZhbHVlOiBhKSA9PiBiKTogU3Vic2NyaXB0aW9uPGI+IHtcbiAgICByZXR1cm4gdGhpcy5tYXAodGFnKVxuICB9XG4gIHJlZHVjZTxzdGF0ZT4oXG4gICAgcmVkdWNlcjogKHJlc3VsdDogc3RhdGUsIGlucHV0OiBTdWJzY3JpYmU8YSwgYW55LCBhbnksIGFueT4pID0+IHN0YXRlLFxuICAgIGluaXQ6IHN0YXRlXG4gICk6IHN0YXRlIHtcbiAgICByZXR1cm4gaW5pdFxuICB9XG59XG5cbmNsYXNzIFN1YnNjcmliZTxhLCBpbmZvLCBtb2RlbCwgbWVzc2FnZT4gZXh0ZW5kcyBTdWJzY3JpcHRpb248YT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBmZWVkOiBGZWVkPGluZm8sIG1vZGVsLCBtZXNzYWdlPixcbiAgICBkZXRhaWw6IGluZm8sXG4gICAgZGVjb2RlcjogRGVjb2RlcjxhPlxuICApIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5mZWVkID0gZmVlZFxuICAgIHRoaXMuZGV0YWlsID0gZGV0YWlsXG4gICAgdGhpcy5kZWNvZGVyID0gZGVjb2RlclxuICB9XG4gIG1hcDxiPih0YWc6ICh2YWx1ZTogYSkgPT4gYik6IFN1YnNjcmlwdGlvbjxiPiB7XG4gICAgY29uc3QgZGVjb2RlciA9ICh2YWx1ZTogbWl4ZWQpID0+IHRhZyh0aGlzLmRlY29kZXIodmFsdWUpKVxuICAgIHJldHVybiBuZXcgU3Vic2NyaWJlKHRoaXMuZmVlZCwgdGhpcy5kZXRhaWwsIGRlY29kZXIpXG4gIH1cbiAgcmVkdWNlPHN0YXRlPihcbiAgICByZWR1Y2VyOiAoXG4gICAgICByZXN1bHQ6IHN0YXRlLFxuICAgICAgaW5wdXQ6IFN1YnNjcmliZTxhLCBpbmZvLCBtb2RlbCwgbWVzc2FnZT5cbiAgICApID0+IHN0YXRlLFxuICAgIGluaXQ6IHN0YXRlXG4gICk6IHN0YXRlIHtcbiAgICByZXR1cm4gcmVkdWNlcihpbml0LCB0aGlzKVxuICB9XG5cbiAgZmVlZDogRmVlZDxpbmZvLCBtb2RlbCwgbWVzc2FnZT5cbiAgZGV0YWlsOiBpbmZvXG4gIGRlY29kZXI6IERlY29kZXI8YT5cbn1cblxuY2xhc3MgQmF0Y2g8YT4gZXh0ZW5kcyBTdWJzY3JpcHRpb248YT4ge1xuICBjb25zdHJ1Y3RvcihzdWJzY3JpcHRpb25zOiBBcnJheTxTdWJzY3JpcHRpb248YT4+KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnNcbiAgfVxuICBtYXA8Yj4odGFnOiAodmFsdWU6IGEpID0+IGIpOiBTdWJzY3JpcHRpb248Yj4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMubWFwKCQgPT4gJC5tYXAodGFnKSlcbiAgICByZXR1cm4gbmV3IEJhdGNoKHN1YnNjcmlwdGlvbnMpXG4gIH1cbiAgcmVkdWNlPHN0YXRlPihcbiAgICByZWR1Y2VyOiAocmVzdWx0OiBzdGF0ZSwgaW5wdXQ6IFN1YnNjcmliZTxhLCBhbnksIGFueSwgYW55PikgPT4gc3RhdGUsXG4gICAgaW5pdDogc3RhdGVcbiAgKTogc3RhdGUge1xuICAgIHJldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMucmVkdWNlKFxuICAgICAgKHJlc3VsdDogc3RhdGUsIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uPGE+KTogc3RhdGUgPT5cbiAgICAgICAgc3Vic2NyaXB0aW9uLnJlZHVjZShyZWR1Y2VyLCByZXN1bHQpLFxuICAgICAgaW5pdFxuICAgIClcbiAgfVxuICBzdWJzY3JpcHRpb25zOiBBcnJheTxTdWJzY3JpcHRpb248YT4+XG59XG5cbmV4cG9ydCBjb25zdCBzdWJzY3JpcHRpb24gPSA8aW5mbywgbW9kZWwsIG1lc3NhZ2UsIGE+KFxuICBmZWVkOiBGZWVkPGluZm8sIG1vZGVsLCBtZXNzYWdlPixcbiAgZGV0YWlsOiBpbmZvLFxuICBkZWNvZGVyOiBEZWNvZGVyPGE+XG4pOiBTdWJzY3JpcHRpb248YT4gPT4gbmV3IFN1YnNjcmliZShmZWVkLCBkZXRhaWwsIGRlY29kZXIpXG5cbmV4cG9ydCBjb25zdCBiYXRjaCA9IDxhPihcbiAgc3Vic2NyaXB0aW9uczogQXJyYXk8U3Vic2NyaXB0aW9uPGE+PlxuKTogU3Vic2NyaXB0aW9uPGE+ID0+IG5ldyBCYXRjaChzdWJzY3JpcHRpb25zKVxuXG5leHBvcnQgY29uc3Qgbm9uZTogU3Vic2NyaXB0aW9uPGFueT4gPSBuZXcgQmF0Y2goW10pXG5leHBvcnQgdHlwZSB7IFN1YnNjcmlwdGlvbiB9XG4iXX0=
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./preemptive-animation-frame"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./preemptive-animation-frame"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.preemptiveAnimationFrame);
    global.task = mod.exports;
  }
})(this, function (exports, _preemptiveAnimationFrame) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Task = undefined;
  const raise = error => {
    throw Error(`Task was not supposet to never fail but it did fail with error ${error}`);
  };

  const ignore = _ => void 0;

  class Task {
    static create(execute) {
      console.warn("Task.create is deprecated API use new Task instead");
      return new Task(execute);
    }
    static future(request) {
      console.warn("Task.future is deprecated API use new Task instead");
      return new Future(request);
    }
    static succeed(value) {
      return new Succeed(value);
    }

    static fail(error) {
      return new Fail(error);
    }

    static spawn(task) {
      return new Spawn(task);
    }

    static sleep(time) {
      return new Sleep(time);
    }

    static requestAnimationFrame() {
      return new AnimationFrame();
    }

    static send(address, message) {
      return new Send(address, message);
    }

    static fork(task, onSucceed, onFail) {
      return Thread.fork(task, onSucceed, onFail);
    }

    static perform(task) {
      Thread.fork(task, ignore, raise);
    }

    constructor(execute, cancel) {
      this.type = "Task";
      const task = this;
      if (execute != null) {
        task.fork = execute;
      }
      if (cancel != null) {
        task.abort = cancel;
      }
    }
    chain(next) {
      return new Chain(this, next);
    }
    map(f) {
      return new Map(this, f);
    }
    capture(handle) {
      return new Capture(this, handle);
    }
    format(f) {
      return new Format(this, f);
    }
    recover(regain) {
      return new Recover(this, regain);
    }
    fork(succeed, fail) {
      return this.execute(succeed, fail);
    }
    abort(token) {
      return this.cancel(token);
    }

  }

  exports.Task = Task;
  class Succeed extends Task {
    constructor(value) {
      super();
      this.type = "Succeed";
      this.value = value;
    }
    fork(succeed, fail) {
      succeed(this.value);
    }

  }

  class Fail extends Task {
    constructor(error) {
      super();
      this.type = "Fail";
      this.error = error;
    }
    fork(succeed, fail) {
      fail(this.error);
    }

  }

  class Sleep extends Task {
    constructor(time) {
      super();
      this.time = time;
    }
    fork(succeed, fail) {
      return setTimeout(succeed, this.time, void 0);
    }
    abort(id) {
      clearTimeout(id);
    }

  }

  class AnimationFrame extends Task {
    constructor() {
      super();
    }
    fork(succeed, fail) {
      return (0, _preemptiveAnimationFrame.requestAnimationFrame)(succeed);
    }
    abort(id) {
      (0, _preemptiveAnimationFrame.cancelAnimationFrame)(id);
    }
  }

  let threadID = 0;
  class Spawn extends Task {
    constructor(task) {
      super();
      this.task = task;
    }
    fork(succeed, fail) {
      Promise.resolve(null).then(_ => Task.fork(this.task, noop, noop));

      succeed(++threadID);
    }

  }

  class Send extends Task {
    constructor(address, message) {
      super();
      this.message = message;
      this.address = address;
    }
    fork(succeed, fail) {
      succeed(void this.address(this.message));
    }

  }

  class Future extends Task {
    constructor(request) {
      super();
      this.request = request;
    }
    fork(succeed, fail) {
      this.request().then(succeed, fail);
    }

  }

  class Then extends Task {
    constructor(task) {
      super();
      this.type = "Then";
      this.task = task;
    }
    fork(succeed, fail) {
      this.task.fork(value => void this.next(value).fork(succeed, fail), fail);
    }
    next(input) {
      throw Error("Subclass of absract Then must implement next method");
    }

  }

  class Chain extends Then {
    constructor(task, next) {
      super(task);
      this.chainer = next;
    }
    next(input) {
      return this.chainer(input);
    }

  }

  class Map extends Then {
    constructor(task, mapper) {
      // Note: Had to trick flow into thinking that `Format.prototype.handle` was
      // passed, otherwise it fails to infer polymorphic nature.
      super(task);
      this.mapper = mapper;
    }
    next(input) {
      return new Succeed(this.mapper(input));
    }

  }

  class Catch extends Task {
    constructor(task) {
      super();
      this.type = "Catch";
      this.task = task;
    }
    fork(succeed, fail) {
      this.task.fork(succeed, error => void this.handle(error).fork(succeed, fail));
    }
    handle(error) {
      throw Error("Subclass of absract Catch must implement handle method");
    }

  }

  class Capture extends Catch {
    constructor(task, handle) {
      super(task);
      this.capturer = handle;
    }

    handle(error) {
      return this.capturer(error);
    }

  }

  class Recover extends Catch {
    constructor(task, regain) {
      super(task);
      this.regain = regain;
    }
    handle(error) {
      return new Succeed(this.regain(error));
    }

  }

  class Format extends Catch {
    constructor(task, formatter) {
      super(task);
      this.formatter = formatter;
    }
    handle(error) {
      return new Fail(this.formatter(error));
    }

  }

  const noop = () => void 0;

  let nextID = 0;

  class Thread {
    static fork(task, onSucceed, onFail) {
      const process = new Thread();
      process.id = ++nextID;
      process.position = 0;
      process.root = task;
      process.stack = [];
      process.mailbox = [];
      process.abortHandle = null;
      process.isActive = true;
      process.isPending = false;
      process.isPaused = true;
      process.success = null;
      process.failure = null;
      process.succeed = onSucceed;
      process.fail = onFail;
      process.onSucceed = process.onSucceed.bind(process);
      process.onFail = process.onFail.bind(process);
      process.schedule();
      return process;
    }
    onSucceed(ok) {
      if (this.isPending) {
        this.isPending = false;
        this.abortHandle = null;

        if (this.success != null) {
          this.success.value = ok;
        } else {
          this.success = new Succeed(ok);
        }

        this.root = this.success;
        this.schedule();
      }
    }
    onFail(failure) {
      if (this.isPending) {
        this.isPending = false;
        this.abortHandle = null;

        if (this.failure != null) {
          this.failure.error = failure;
        } else {
          this.failure = new Fail(failure);
        }

        this.root = this.failure;
        this.schedule();
      }
    }
    kill(exit) {
      if (this.isActive) {
        this.isActive = false;
        if (this.root.abort) {
          this.root.abort(this.abortHandle);
        }
      }
    }
    schedule() {
      if (this.isPaused) {
        this.isPaused = false;
        this.step();
      }
    }
    step() {
      const process = this;
      while (process.isActive) {
        const root = process.root;
        switch (root.type) {
          case "Succeed":
            {
              const task = root;
              // If task succeeded skip all the error handling.
              while (process.position < process.stack.length && process.stack[process.position] instanceof Catch) {
                process.position++;
              }

              // If end of the stack is reached then break
              if (process.position >= process.stack.length) {
                if (process.succeed != null) {
                  process.succeed(task.value);
                }
                return;
              }

              // Otherwise step into next task.
              const then = process.stack[process.position++];
              if (then instanceof Then) {
                process.root = then.next(task.value);
              }

              break;
            }
          case "Fail":
            {
              const task = root;
              // If task fails skip all the chaining.
              while (process.position < process.stack.length && process.stack[process.position] instanceof Then) {
                process.position++;
              }

              // If end of the stack is reached then break.
              if (this.position >= process.stack.length) {
                if (process.fail != null) {
                  process.fail(task.error);
                }

                return;
              }

              // Otherwise step into next task.
              const _catch = process.stack[process.position++];
              if (_catch instanceof Catch) {
                process.root = _catch.handle(task.error);
              }

              break;
            }
          case "Then":
            {
              const task = root;
              if (process.position === 0) {
                process.stack.unshift(task);
              } else {
                process.stack[--process.position] = task;
              }

              process.root = task.task;

              break;
            }
          case "Catch":
            {
              const task = root;
              if (process.position === 0) {
                process.stack.unshift(task);
              } else {
                process.stack[--process.position] = task;
              }

              process.root = task.task;

              break;
            }
          default:
            {
              const task = root;
              process.isPending = true;
              process.abortHandle = task.fork(process.onSucceed, process.onFail);
              process.isPaused = process.isPending;
              if (this.isPending) {
                return;
              }

              break;
            }
        }
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["./test", "../"], factory);
  } else if (typeof exports !== "undefined") {
    factory(require("./test"), require("../"));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.test, global._);
    global.testApi = mod.exports;
  }
})(this, function (_test, _) {
  "use strict";

  var _test2 = _interopRequireDefault(_test);

  var Reflex = _interopRequireWildcard(_);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  (0, _test2.default)("test exported api", assert => {
    assert.ok(typeof Reflex.node, "function");

    assert.ok(typeof Reflex.html, "object");
    assert.ok(typeof Reflex.html.div, "function");

    assert.ok(typeof Reflex.thunk, "function");
    assert.ok(typeof Reflex.send, "function");
    assert.ok(typeof Reflex.forward, "function");

    assert.ok(typeof Reflex.Application, "function");

    assert.ok(typeof Reflex.Task.succeed, "function");
    assert.ok(typeof Reflex.Task.fail, "function");
    assert.ok(typeof Reflex.Task.io, "function");
    assert.ok(typeof Reflex.Task.onSuccess, "function");
    assert.ok(typeof Reflex.Task.onFailure, "function");
    assert.ok(typeof Reflex.Task.perform, "function");
    assert.ok(typeof Reflex.Task.run, "function");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0L3Rlc3QtYXBpLmpzIl0sIm5hbWVzIjpbIlJlZmxleCIsImFzc2VydCIsIm9rIiwibm9kZSIsImh0bWwiLCJkaXYiLCJ0aHVuayIsInNlbmQiLCJmb3J3YXJkIiwiQXBwbGljYXRpb24iLCJUYXNrIiwic3VjY2VlZCIsImZhaWwiLCJpbyIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInBlcmZvcm0iLCJydW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O01BQ1lBLE07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFWixzQkFBSyxtQkFBTCxFQUEwQkMsVUFBVTtBQUNsQ0EsV0FBT0MsRUFBUCxDQUFVLE9BQU9GLE9BQU9HLElBQXhCLEVBQStCLFVBQS9COztBQUVBRixXQUFPQyxFQUFQLENBQVUsT0FBT0YsT0FBT0ksSUFBeEIsRUFBK0IsUUFBL0I7QUFDQUgsV0FBT0MsRUFBUCxDQUFVLE9BQU9GLE9BQU9JLElBQVAsQ0FBWUMsR0FBN0IsRUFBbUMsVUFBbkM7O0FBRUFKLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPTSxLQUF4QixFQUFnQyxVQUFoQztBQUNBTCxXQUFPQyxFQUFQLENBQVUsT0FBT0YsT0FBT08sSUFBeEIsRUFBK0IsVUFBL0I7QUFDQU4sV0FBT0MsRUFBUCxDQUFVLE9BQU9GLE9BQU9RLE9BQXhCLEVBQWtDLFVBQWxDOztBQUVBUCxXQUFPQyxFQUFQLENBQVUsT0FBT0YsT0FBT1MsV0FBeEIsRUFBc0MsVUFBdEM7O0FBR0FSLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlDLE9BQTdCLEVBQXVDLFVBQXZDO0FBQ0FWLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlFLElBQTdCLEVBQW9DLFVBQXBDO0FBQ0FYLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlHLEVBQTdCLEVBQWtDLFVBQWxDO0FBQ0FaLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlJLFNBQTdCLEVBQXlDLFVBQXpDO0FBQ0FiLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlLLFNBQTdCLEVBQXlDLFVBQXpDO0FBQ0FkLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlNLE9BQTdCLEVBQXVDLFVBQXZDO0FBQ0FmLFdBQU9DLEVBQVAsQ0FBVSxPQUFPRixPQUFPVSxJQUFQLENBQVlPLEdBQTdCLEVBQW1DLFVBQW5DO0FBQ0QsR0FwQkQiLCJmaWxlIjoidGVzdC1hcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tIFwiLi90ZXN0XCJcbmltcG9ydCAqIGFzIFJlZmxleCBmcm9tIFwiLi4vXCJcblxudGVzdChcInRlc3QgZXhwb3J0ZWQgYXBpXCIsIGFzc2VydCA9PiB7XG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4Lm5vZGUpLCBcImZ1bmN0aW9uXCIpXG5cbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguaHRtbCksIFwib2JqZWN0XCIpXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4Lmh0bWwuZGl2KSwgXCJmdW5jdGlvblwiKVxuXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4LnRodW5rKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5zZW5kKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5mb3J3YXJkKSwgXCJmdW5jdGlvblwiKVxuXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4LkFwcGxpY2F0aW9uKSwgXCJmdW5jdGlvblwiKVxuXG5cbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguVGFzay5zdWNjZWVkKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5UYXNrLmZhaWwpLCBcImZ1bmN0aW9uXCIpXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4LlRhc2suaW8pLCBcImZ1bmN0aW9uXCIpXG4gIGFzc2VydC5vayh0eXBlb2YoUmVmbGV4LlRhc2sub25TdWNjZXNzKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5UYXNrLm9uRmFpbHVyZSksIFwiZnVuY3Rpb25cIilcbiAgYXNzZXJ0Lm9rKHR5cGVvZihSZWZsZXguVGFzay5wZXJmb3JtKSwgXCJmdW5jdGlvblwiKVxuICBhc3NlcnQub2sodHlwZW9mKFJlZmxleC5UYXNrLnJ1biksIFwiZnVuY3Rpb25cIilcbn0pXG4iXX0=
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "tape"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("tape"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.tape);
    global.test = mod.exports;
  }
})(this, function (exports, _tape) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var tape = _interopRequireWildcard(_tape);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  exports.default = (description, unit) => tape.test(description, test => {
    var result = unit(test);
    if (result && result.then) {
      result.then(_ => test.end(), error => test.end(error || true));
    } else {
      test.end();
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0L3Rlc3QuanMiXSwibmFtZXMiOlsidGFwZSIsImRlc2NyaXB0aW9uIiwidW5pdCIsInRlc3QiLCJyZXN1bHQiLCJ0aGVuIiwiXyIsImVuZCIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BQVlBLEk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRUcsQ0FBQ0MsV0FBRCxFQUFjQyxJQUFkLEtBQXVCRixLQUFLRyxJQUFMLENBQVVGLFdBQVYsRUFBdUJFLFFBQVE7QUFDbkUsUUFBSUMsU0FBU0YsS0FBS0MsSUFBTCxDQUFiO0FBQ0EsUUFBSUMsVUFBVUEsT0FBT0MsSUFBckIsRUFBMkI7QUFDekJELGFBQU9DLElBQVAsQ0FBWUMsS0FBS0gsS0FBS0ksR0FBTCxFQUFqQixFQUE2QkMsU0FBU0wsS0FBS0ksR0FBTCxDQUFTQyxTQUFTLElBQWxCLENBQXRDO0FBQ0QsS0FGRCxNQUVPO0FBQ0xMLFdBQUtJLEdBQUw7QUFDRDtBQUNGLEdBUHFDLEMiLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRhcGUgZnJvbSBcInRhcGVcIlxuXG5leHBvcnQgZGVmYXVsdCAoZGVzY3JpcHRpb24sIHVuaXQpID0+IHRhcGUudGVzdChkZXNjcmlwdGlvbiwgdGVzdCA9PiB7XG4gIHZhciByZXN1bHQgPSB1bml0KHRlc3QpXG4gIGlmIChyZXN1bHQgJiYgcmVzdWx0LnRoZW4pIHtcbiAgICByZXN1bHQudGhlbihfID0+IHRlc3QuZW5kKCksIGVycm9yID0+IHRlc3QuZW5kKGVycm9yIHx8IHRydWUpKVxuICB9IGVsc2Uge1xuICAgIHRlc3QuZW5kKClcbiAgfVxufSlcbiJdfQ==
