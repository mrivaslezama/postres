"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Task = undefined;

var _preemptiveAnimationFrame = require("./preemptive-animation-frame");

const raise = error => {
  throw Error(`Task was not supposet to never fail but it did fail with error ${error}`);
};

const ignore = _ => void 0;

class Task {
  static create(execute) {
    console.warn("Task.create is deprecated API use new Task instead");
    return new Task(execute);
  }
  static future(request) {
    console.warn("Task.future is deprecated API use new Task instead");
    return new Future(request);
  }
  static succeed(value) {
    return new Succeed(value);
  }

  static fail(error) {
    return new Fail(error);
  }

  static spawn(task) {
    return new Spawn(task);
  }

  static sleep(time) {
    return new Sleep(time);
  }

  static requestAnimationFrame() {
    return new AnimationFrame();
  }

  static send(address, message) {
    return new Send(address, message);
  }

  static fork(task, onSucceed, onFail) {
    return Thread.fork(task, onSucceed, onFail);
  }

  static perform(task) {
    Thread.fork(task, ignore, raise);
  }

  constructor(execute, cancel) {
    this.type = "Task";
    const task = this;
    if (execute != null) {
      task.fork = execute;
    }
    if (cancel != null) {
      task.abort = cancel;
    }
  }
  chain(next) {
    return new Chain(this, next);
  }
  map(f) {
    return new Map(this, f);
  }
  capture(handle) {
    return new Capture(this, handle);
  }
  format(f) {
    return new Format(this, f);
  }
  recover(regain) {
    return new Recover(this, regain);
  }
  fork(succeed, fail) {
    return this.execute(succeed, fail);
  }
  abort(token) {
    return this.cancel(token);
  }

}

exports.Task = Task;
class Succeed extends Task {
  constructor(value) {
    super();
    this.type = "Succeed";
    this.value = value;
  }
  fork(succeed, fail) {
    succeed(this.value);
  }

}

class Fail extends Task {
  constructor(error) {
    super();
    this.type = "Fail";
    this.error = error;
  }
  fork(succeed, fail) {
    fail(this.error);
  }

}

class Sleep extends Task {
  constructor(time) {
    super();
    this.time = time;
  }
  fork(succeed, fail) {
    return setTimeout(succeed, this.time, void 0);
  }
  abort(id) {
    clearTimeout(id);
  }

}

class AnimationFrame extends Task {
  constructor() {
    super();
  }
  fork(succeed, fail) {
    return (0, _preemptiveAnimationFrame.requestAnimationFrame)(succeed);
  }
  abort(id) {
    (0, _preemptiveAnimationFrame.cancelAnimationFrame)(id);
  }
}

let threadID = 0;
class Spawn extends Task {
  constructor(task) {
    super();
    this.task = task;
  }
  fork(succeed, fail) {
    Promise.resolve(null).then(_ => Task.fork(this.task, noop, noop));

    succeed(++threadID);
  }

}

class Send extends Task {
  constructor(address, message) {
    super();
    this.message = message;
    this.address = address;
  }
  fork(succeed, fail) {
    succeed(void this.address(this.message));
  }

}

class Future extends Task {
  constructor(request) {
    super();
    this.request = request;
  }
  fork(succeed, fail) {
    this.request().then(succeed, fail);
  }

}

class Then extends Task {
  constructor(task) {
    super();
    this.type = "Then";
    this.task = task;
  }
  fork(succeed, fail) {
    this.task.fork(value => void this.next(value).fork(succeed, fail), fail);
  }
  next(input) {
    throw Error("Subclass of absract Then must implement next method");
  }

}

class Chain extends Then {
  constructor(task, next) {
    super(task);
    this.chainer = next;
  }
  next(input) {
    return this.chainer(input);
  }

}

class Map extends Then {
  constructor(task, mapper) {
    super(task);
    this.mapper = mapper;
  }
  next(input) {
    return new Succeed(this.mapper(input));
  }

}

class Catch extends Task {
  constructor(task) {
    super();
    this.type = "Catch";
    this.task = task;
  }
  fork(succeed, fail) {
    this.task.fork(succeed, error => void this.handle(error).fork(succeed, fail));
  }
  handle(error) {
    throw Error("Subclass of absract Catch must implement handle method");
  }

}

class Capture extends Catch {
  constructor(task, handle) {
    super(task);
    this.capturer = handle;
  }

  handle(error) {
    return this.capturer(error);
  }

}

class Recover extends Catch {
  constructor(task, regain) {
    super(task);
    this.regain = regain;
  }
  handle(error) {
    return new Succeed(this.regain(error));
  }

}

class Format extends Catch {
  constructor(task, formatter) {
    super(task);
    this.formatter = formatter;
  }
  handle(error) {
    return new Fail(this.formatter(error));
  }

}

const noop = () => void 0;

let nextID = 0;

class Thread {
  static fork(task, onSucceed, onFail) {
    const process = new Thread();
    process.id = ++nextID;
    process.position = 0;
    process.root = task;
    process.stack = [];
    process.mailbox = [];
    process.abortHandle = null;
    process.isActive = true;
    process.isPending = false;
    process.isPaused = true;
    process.success = null;
    process.failure = null;
    process.succeed = onSucceed;
    process.fail = onFail;
    process.onSucceed = process.onSucceed.bind(process);
    process.onFail = process.onFail.bind(process);
    process.schedule();
    return process;
  }
  onSucceed(ok) {
    if (this.isPending) {
      this.isPending = false;
      this.abortHandle = null;

      if (this.success != null) {
        this.success.value = ok;
      } else {
        this.success = new Succeed(ok);
      }

      this.root = this.success;
      this.schedule();
    }
  }
  onFail(failure) {
    if (this.isPending) {
      this.isPending = false;
      this.abortHandle = null;

      if (this.failure != null) {
        this.failure.error = failure;
      } else {
        this.failure = new Fail(failure);
      }

      this.root = this.failure;
      this.schedule();
    }
  }
  kill(exit) {
    if (this.isActive) {
      this.isActive = false;
      if (this.root.abort) {
        this.root.abort(this.abortHandle);
      }
    }
  }
  schedule() {
    if (this.isPaused) {
      this.isPaused = false;
      this.step();
    }
  }
  step() {
    const process = this;
    while (process.isActive) {
      const root = process.root;
      switch (root.type) {
        case "Succeed":
          {
            const task = root;

            while (process.position < process.stack.length && process.stack[process.position] instanceof Catch) {
              process.position++;
            }

            if (process.position >= process.stack.length) {
              if (process.succeed != null) {
                process.succeed(task.value);
              }
              return;
            }

            const then = process.stack[process.position++];
            if (then instanceof Then) {
              process.root = then.next(task.value);
            }

            break;
          }
        case "Fail":
          {
            const task = root;

            while (process.position < process.stack.length && process.stack[process.position] instanceof Then) {
              process.position++;
            }

            if (this.position >= process.stack.length) {
              if (process.fail != null) {
                process.fail(task.error);
              }

              return;
            }

            const _catch = process.stack[process.position++];
            if (_catch instanceof Catch) {
              process.root = _catch.handle(task.error);
            }

            break;
          }
        case "Then":
          {
            const task = root;
            if (process.position === 0) {
              process.stack.unshift(task);
            } else {
              process.stack[--process.position] = task;
            }

            process.root = task.task;

            break;
          }
        case "Catch":
          {
            const task = root;
            if (process.position === 0) {
              process.stack.unshift(task);
            } else {
              process.stack[--process.position] = task;
            }

            process.root = task.task;

            break;
          }
        default:
          {
            const task = root;
            process.isPending = true;
            process.abortHandle = task.fork(process.onSucceed, process.onFail);
            process.isPaused = process.isPending;
            if (this.isPending) {
              return;
            }

            break;
          }
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy90YXNrLmpzIl0sIm5hbWVzIjpbInJhaXNlIiwiZXJyb3IiLCJFcnJvciIsImlnbm9yZSIsIl8iLCJUYXNrIiwiY3JlYXRlIiwiZXhlY3V0ZSIsImNvbnNvbGUiLCJ3YXJuIiwiZnV0dXJlIiwicmVxdWVzdCIsIkZ1dHVyZSIsInN1Y2NlZWQiLCJ2YWx1ZSIsIlN1Y2NlZWQiLCJmYWlsIiwiRmFpbCIsInNwYXduIiwidGFzayIsIlNwYXduIiwic2xlZXAiLCJ0aW1lIiwiU2xlZXAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJBbmltYXRpb25GcmFtZSIsInNlbmQiLCJhZGRyZXNzIiwibWVzc2FnZSIsIlNlbmQiLCJmb3JrIiwib25TdWNjZWVkIiwib25GYWlsIiwiVGhyZWFkIiwicGVyZm9ybSIsImNvbnN0cnVjdG9yIiwiY2FuY2VsIiwidHlwZSIsImFib3J0IiwiY2hhaW4iLCJuZXh0IiwiQ2hhaW4iLCJtYXAiLCJmIiwiTWFwIiwiY2FwdHVyZSIsImhhbmRsZSIsIkNhcHR1cmUiLCJmb3JtYXQiLCJGb3JtYXQiLCJyZWNvdmVyIiwicmVnYWluIiwiUmVjb3ZlciIsInRva2VuIiwic2V0VGltZW91dCIsImlkIiwiY2xlYXJUaW1lb3V0IiwidGhyZWFkSUQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJub29wIiwiVGhlbiIsImlucHV0IiwiY2hhaW5lciIsIm1hcHBlciIsIkNhdGNoIiwiY2FwdHVyZXIiLCJmb3JtYXR0ZXIiLCJuZXh0SUQiLCJwcm9jZXNzIiwicG9zaXRpb24iLCJyb290Iiwic3RhY2siLCJtYWlsYm94IiwiYWJvcnRIYW5kbGUiLCJpc0FjdGl2ZSIsImlzUGVuZGluZyIsImlzUGF1c2VkIiwic3VjY2VzcyIsImZhaWx1cmUiLCJiaW5kIiwic2NoZWR1bGUiLCJvayIsImtpbGwiLCJleGl0Iiwic3RlcCIsImxlbmd0aCIsIl9jYXRjaCIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFTQSxNQUFNQSxRQUFRQyxTQUFTO0FBQ3JCLFFBQU1DLE1BQ0gsa0VBQWlFRCxLQUFNLEVBRHBFLENBQU47QUFHRCxDQUpEOztBQU1BLE1BQU1FLFNBQVNDLEtBQUssS0FBSyxDQUF6Qjs7QUFRTyxNQUFNQyxJQUFOLENBQWlCO0FBQ3RCLFNBQU9DLE1BQVAsQ0FDRUMsT0FERixFQUVjO0FBQ1pDLFlBQVFDLElBQVIsQ0FBYSxvREFBYjtBQUNBLFdBQU8sSUFBSUosSUFBSixDQUFTRSxPQUFULENBQVA7QUFDRDtBQUNELFNBQU9HLE1BQVAsQ0FBb0JDLE9BQXBCLEVBQTJEO0FBQ3pESCxZQUFRQyxJQUFSLENBQWEsb0RBQWI7QUFDQSxXQUFPLElBQUlHLE1BQUosQ0FBV0QsT0FBWCxDQUFQO0FBQ0Q7QUFDRCxTQUFPRSxPQUFQLENBQXFCQyxLQUFyQixFQUEyQztBQUN6QyxXQUFPLElBQUlDLE9BQUosQ0FBWUQsS0FBWixDQUFQO0FBQ0Q7O0FBRUQsU0FBT0UsSUFBUCxDQUFrQmYsS0FBbEIsRUFBd0M7QUFDdEMsV0FBTyxJQUFJZ0IsSUFBSixDQUFTaEIsS0FBVCxDQUFQO0FBQ0Q7O0FBRUQsU0FBT2lCLEtBQVAsQ0FBc0JDLElBQXRCLEVBQTJEO0FBQ3pELFdBQU8sSUFBSUMsS0FBSixDQUFVRCxJQUFWLENBQVA7QUFDRDs7QUFFRCxTQUFPRSxLQUFQLENBQWdCQyxJQUFoQixFQUEyQztBQUN6QyxXQUFPLElBQUlDLEtBQUosQ0FBVUQsSUFBVixDQUFQO0FBQ0Q7O0FBRUQsU0FBT0UscUJBQVAsR0FBaUQ7QUFDL0MsV0FBTyxJQUFJQyxjQUFKLEVBQVA7QUFDRDs7QUFFRCxTQUFPQyxJQUFQLENBQWtCQyxPQUFsQixFQUF1Q0MsT0FBdkMsRUFBa0U7QUFDaEUsV0FBTyxJQUFJQyxJQUFKLENBQVNGLE9BQVQsRUFBa0JDLE9BQWxCLENBQVA7QUFDRDs7QUFFRCxTQUFPRSxJQUFQLENBQ0VYLElBREYsRUFFRVksU0FGRixFQUdFQyxNQUhGLEVBSWtDO0FBQ2hDLFdBQU9DLE9BQU9ILElBQVAsQ0FBWVgsSUFBWixFQUFrQlksU0FBbEIsRUFBNkJDLE1BQTdCLENBQVA7QUFDRDs7QUFFRCxTQUFPRSxPQUFQLENBQWVmLElBQWYsRUFBOEM7QUFDNUNjLFdBQU9ILElBQVAsQ0FBWVgsSUFBWixFQUFrQmhCLE1BQWxCLEVBQTBCSCxLQUExQjtBQUNEOztBQUVEbUMsY0FDRTVCLE9BREYsRUFFRTZCLE1BRkYsRUFHRTtBQUNBLFNBQUtDLElBQUwsR0FBWSxNQUFaO0FBQ0EsVUFBTWxCLE9BQVEsSUFBZDtBQUNBLFFBQUlaLFdBQVcsSUFBZixFQUFxQjtBQUNuQlksV0FBS1csSUFBTCxHQUFZdkIsT0FBWjtBQUNEO0FBQ0QsUUFBSTZCLFVBQVUsSUFBZCxFQUFvQjtBQUNsQmpCLFdBQUttQixLQUFMLEdBQWFGLE1BQWI7QUFDRDtBQUNGO0FBQ0RHLFFBQVNDLElBQVQsRUFBaUQ7QUFDL0MsV0FBTyxJQUFJQyxLQUFKLENBQVUsSUFBVixFQUFnQkQsSUFBaEIsQ0FBUDtBQUNEO0FBQ0RFLE1BQU9DLENBQVAsRUFBdUM7QUFDckMsV0FBTyxJQUFJQyxHQUFKLENBQVEsSUFBUixFQUFjRCxDQUFkLENBQVA7QUFDRDtBQUNERSxVQUFXQyxNQUFYLEVBQXlEO0FBQ3ZELFdBQU8sSUFBSUMsT0FBSixDQUFZLElBQVosRUFBa0JELE1BQWxCLENBQVA7QUFDRDtBQUNERSxTQUFVTCxDQUFWLEVBQTBDO0FBQ3hDLFdBQU8sSUFBSU0sTUFBSixDQUFXLElBQVgsRUFBaUJOLENBQWpCLENBQVA7QUFDRDtBQUNETyxVQUFXQyxNQUFYLEVBQWdEO0FBQzlDLFdBQU8sSUFBSUMsT0FBSixDQUFZLElBQVosRUFBa0JELE1BQWxCLENBQVA7QUFDRDtBQUNEckIsT0FBS2pCLE9BQUwsRUFBOEJHLElBQTlCLEVBQXVEO0FBQ3JELFdBQU8sS0FBS1QsT0FBTCxDQUFhTSxPQUFiLEVBQXNCRyxJQUF0QixDQUFQO0FBQ0Q7QUFDRHNCLFFBQU1lLEtBQU4sRUFBc0I7QUFDcEIsV0FBTyxLQUFLakIsTUFBTCxDQUFZaUIsS0FBWixDQUFQO0FBQ0Q7O0FBaEZxQjs7UUFBWGhELEksR0FBQUEsSTtBQXVGYixNQUFNVSxPQUFOLFNBQTRCVixJQUE1QixDQUF1QztBQUNyQzhCLGNBQVlyQixLQUFaLEVBQXNCO0FBQ3BCO0FBQ0EsU0FBS3VCLElBQUwsR0FBWSxTQUFaO0FBQ0EsU0FBS3ZCLEtBQUwsR0FBYUEsS0FBYjtBQUNEO0FBQ0RnQixPQUFLakIsT0FBTCxFQUE4QkcsSUFBOUIsRUFBMEQ7QUFDeERILFlBQVEsS0FBS0MsS0FBYjtBQUNEOztBQVJvQzs7QUFjdkMsTUFBTUcsSUFBTixTQUF5QlosSUFBekIsQ0FBb0M7QUFDbEM4QixjQUFZbEMsS0FBWixFQUFzQjtBQUNwQjtBQUNBLFNBQUtvQyxJQUFMLEdBQVksTUFBWjtBQUNBLFNBQUtwQyxLQUFMLEdBQWFBLEtBQWI7QUFDRDtBQUNENkIsT0FBS2pCLE9BQUwsRUFBOEJHLElBQTlCLEVBQTBEO0FBQ3hEQSxTQUFLLEtBQUtmLEtBQVY7QUFDRDs7QUFSaUM7O0FBY3BDLE1BQU1zQixLQUFOLFNBQWdDbEIsSUFBaEMsQ0FBOEM7QUFDNUM4QixjQUFZYixJQUFaLEVBQXdCO0FBQ3RCO0FBQ0EsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7QUFDRFEsT0FBS2pCLE9BQUwsRUFBOEJHLElBQTlCLEVBQTREO0FBQzFELFdBQU9zQyxXQUFXekMsT0FBWCxFQUFvQixLQUFLUyxJQUF6QixFQUErQixLQUFLLENBQXBDLENBQVA7QUFDRDtBQUNEZ0IsUUFBTWlCLEVBQU4sRUFBd0I7QUFDdEJDLGlCQUFhRCxFQUFiO0FBQ0Q7O0FBVjJDOztBQWU5QyxNQUFNOUIsY0FBTixTQUFnQ3BCLElBQWhDLENBQThDO0FBQzVDOEIsZ0JBQWM7QUFDWjtBQUNEO0FBQ0RMLE9BQUtqQixPQUFMLEVBQWlDRyxJQUFqQyxFQUErRDtBQUM3RCxXQUFPLHFEQUFzQkgsT0FBdEIsQ0FBUDtBQUNEO0FBQ0R5QixRQUFNaUIsRUFBTixFQUF3QjtBQUN0Qix3REFBcUJBLEVBQXJCO0FBQ0Q7QUFUMkM7O0FBWTlDLElBQUlFLFdBQVcsQ0FBZjtBQUNBLE1BQU1yQyxLQUFOLFNBQTZCZixJQUE3QixDQUErQztBQUM3QzhCLGNBQVloQixJQUFaLEVBQThCO0FBQzVCO0FBQ0EsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7QUFDRFcsT0FBS2pCLE9BQUwsRUFBcUNHLElBQXJDLEVBQWlFO0FBQy9EMEMsWUFBUUMsT0FBUixDQUFnQixJQUFoQixFQUFzQkMsSUFBdEIsQ0FBMkJ4RCxLQUFLQyxLQUFLeUIsSUFBTCxDQUFVLEtBQUtYLElBQWYsRUFBcUIwQyxJQUFyQixFQUEyQkEsSUFBM0IsQ0FBaEM7O0FBRUFoRCxZQUFRLEVBQUU0QyxRQUFWO0FBQ0Q7O0FBVDRDOztBQWMvQyxNQUFNNUIsSUFBTixTQUF5QnhCLElBQXpCLENBQXVDO0FBQ3JDOEIsY0FBWVIsT0FBWixFQUFpQ0MsT0FBakMsRUFBNkM7QUFDM0M7QUFDQSxTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLRCxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUNERyxPQUFLakIsT0FBTCxFQUFpQ0csSUFBakMsRUFBNkQ7QUFDM0RILFlBQVEsS0FBSyxLQUFLYyxPQUFMLENBQWEsS0FBS0MsT0FBbEIsQ0FBYjtBQUNEOztBQVJvQzs7QUFjdkMsTUFBTWhCLE1BQU4sU0FBMkJQLElBQTNCLENBQXNDO0FBQ3BDOEIsY0FBWXhCLE9BQVosRUFBdUM7QUFDckM7QUFDQSxTQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUNEbUIsT0FBS2pCLE9BQUwsRUFBOEJHLElBQTlCLEVBQTBEO0FBQ3hELFNBQUtMLE9BQUwsR0FBZWlELElBQWYsQ0FBb0IvQyxPQUFwQixFQUE2QkcsSUFBN0I7QUFDRDs7QUFQbUM7O0FBWXRDLE1BQU04QyxJQUFOLFNBQTRCekQsSUFBNUIsQ0FBdUM7QUFDckM4QixjQUFZaEIsSUFBWixFQUE4QjtBQUM1QjtBQUNBLFNBQUtrQixJQUFMLEdBQVksTUFBWjtBQUNBLFNBQUtsQixJQUFMLEdBQVlBLElBQVo7QUFDRDtBQUNEVyxPQUFLakIsT0FBTCxFQUFrQ0csSUFBbEMsRUFBa0U7QUFDaEUsU0FBS0csSUFBTCxDQUFVVyxJQUFWLENBQ0doQixLQUFELElBQW9CLEtBQUssS0FBSzBCLElBQUwsQ0FBVTFCLEtBQVYsRUFBaUJnQixJQUFqQixDQUFzQmpCLE9BQXRCLEVBQStCRyxJQUEvQixDQUQzQixFQUVFQSxJQUZGO0FBSUQ7QUFDRHdCLE9BQUt1QixLQUFMLEVBQTJCO0FBQ3pCLFVBQU03RCxNQUFNLHFEQUFOLENBQU47QUFDRDs7QUFkb0M7O0FBb0J2QyxNQUFNdUMsS0FBTixTQUE2QnFCLElBQTdCLENBQTJDO0FBQ3pDM0IsY0FBWWhCLElBQVosRUFBOEJxQixJQUE5QixFQUE4RDtBQUM1RCxVQUFNckIsSUFBTjtBQUNBLFNBQUs2QyxPQUFMLEdBQWV4QixJQUFmO0FBQ0Q7QUFDREEsT0FBS3VCLEtBQUwsRUFBMkI7QUFDekIsV0FBTyxLQUFLQyxPQUFMLENBQWFELEtBQWIsQ0FBUDtBQUNEOztBQVB3Qzs7QUFZM0MsTUFBTW5CLEdBQU4sU0FBMkJrQixJQUEzQixDQUF5QztBQUN2QzNCLGNBQVloQixJQUFaLEVBQThCOEMsTUFBOUIsRUFBdUQ7QUFHckQsVUFBTTlDLElBQU47QUFDQSxTQUFLOEMsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7QUFDRHpCLE9BQUt1QixLQUFMLEVBQTJCO0FBQ3pCLFdBQU8sSUFBSWhELE9BQUosQ0FBWSxLQUFLa0QsTUFBTCxDQUFZRixLQUFaLENBQVosQ0FBUDtBQUNEOztBQVRzQzs7QUFjekMsTUFBTUcsS0FBTixTQUE2QjdELElBQTdCLENBQXdDO0FBQ3RDOEIsY0FBWWhCLElBQVosRUFBOEI7QUFDNUI7QUFDQSxTQUFLa0IsSUFBTCxHQUFZLE9BQVo7QUFDQSxTQUFLbEIsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7QUFDRFcsT0FBS2pCLE9BQUwsRUFBa0NHLElBQWxDLEVBQWtFO0FBQ2hFLFNBQUtHLElBQUwsQ0FBVVcsSUFBVixDQUNFakIsT0FERixFQUVFWixTQUFTLEtBQUssS0FBSzZDLE1BQUwsQ0FBWTdDLEtBQVosRUFBbUI2QixJQUFuQixDQUF3QmpCLE9BQXhCLEVBQWlDRyxJQUFqQyxDQUZoQjtBQUlEO0FBQ0Q4QixTQUFPN0MsS0FBUCxFQUE2QjtBQUMzQixVQUFNQyxNQUFNLHdEQUFOLENBQU47QUFDRDs7QUFkcUM7O0FBb0J4QyxNQUFNNkMsT0FBTixTQUErQm1CLEtBQS9CLENBQThDO0FBQzVDL0IsY0FBWWhCLElBQVosRUFBOEIyQixNQUE5QixFQUFnRTtBQUM5RCxVQUFNM0IsSUFBTjtBQUNBLFNBQUtnRCxRQUFMLEdBQWdCckIsTUFBaEI7QUFDRDs7QUFFREEsU0FBTzdDLEtBQVAsRUFBNkI7QUFDM0IsV0FBTyxLQUFLa0UsUUFBTCxDQUFjbEUsS0FBZCxDQUFQO0FBQ0Q7O0FBUjJDOztBQWE5QyxNQUFNbUQsT0FBTixTQUErQmMsS0FBL0IsQ0FBOEM7QUFDNUMvQixjQUFZaEIsSUFBWixFQUE4QmdDLE1BQTlCLEVBQXVEO0FBQ3JELFVBQU1oQyxJQUFOO0FBQ0EsU0FBS2dDLE1BQUwsR0FBY0EsTUFBZDtBQUNEO0FBQ0RMLFNBQU83QyxLQUFQLEVBQTZCO0FBQzNCLFdBQU8sSUFBSWMsT0FBSixDQUFZLEtBQUtvQyxNQUFMLENBQVlsRCxLQUFaLENBQVosQ0FBUDtBQUNEOztBQVAyQzs7QUFZOUMsTUFBTWdELE1BQU4sU0FBOEJpQixLQUE5QixDQUE2QztBQUMzQy9CLGNBQVloQixJQUFaLEVBQThCaUQsU0FBOUIsRUFBMEQ7QUFDeEQsVUFBTWpELElBQU47QUFDQSxTQUFLaUQsU0FBTCxHQUFpQkEsU0FBakI7QUFDRDtBQUNEdEIsU0FBTzdDLEtBQVAsRUFBNkI7QUFDM0IsV0FBTyxJQUFJZ0IsSUFBSixDQUFTLEtBQUttRCxTQUFMLENBQWVuRSxLQUFmLENBQVQsQ0FBUDtBQUNEOztBQVAwQzs7QUFZN0MsTUFBTTRELE9BQU8sTUFBTSxLQUFLLENBQXhCOztBQUVBLElBQUlRLFNBQVMsQ0FBYjs7QUFTQSxNQUFNcEMsTUFBTixDQUE0QztBQWdCMUMsU0FBT0gsSUFBUCxDQUNFWCxJQURGLEVBRUVZLFNBRkYsRUFHRUMsTUFIRixFQUkwQztBQUN4QyxVQUFNc0MsVUFBVSxJQUFJckMsTUFBSixFQUFoQjtBQUNBcUMsWUFBUWYsRUFBUixHQUFhLEVBQUVjLE1BQWY7QUFDQUMsWUFBUUMsUUFBUixHQUFtQixDQUFuQjtBQUNBRCxZQUFRRSxJQUFSLEdBQWVyRCxJQUFmO0FBQ0FtRCxZQUFRRyxLQUFSLEdBQWdCLEVBQWhCO0FBQ0FILFlBQVFJLE9BQVIsR0FBa0IsRUFBbEI7QUFDQUosWUFBUUssV0FBUixHQUFzQixJQUF0QjtBQUNBTCxZQUFRTSxRQUFSLEdBQW1CLElBQW5CO0FBQ0FOLFlBQVFPLFNBQVIsR0FBb0IsS0FBcEI7QUFDQVAsWUFBUVEsUUFBUixHQUFtQixJQUFuQjtBQUNBUixZQUFRUyxPQUFSLEdBQWtCLElBQWxCO0FBQ0FULFlBQVFVLE9BQVIsR0FBa0IsSUFBbEI7QUFDQVYsWUFBUXpELE9BQVIsR0FBa0JrQixTQUFsQjtBQUNBdUMsWUFBUXRELElBQVIsR0FBZWdCLE1BQWY7QUFDQXNDLFlBQVF2QyxTQUFSLEdBQW9CdUMsUUFBUXZDLFNBQVIsQ0FBa0JrRCxJQUFsQixDQUF1QlgsT0FBdkIsQ0FBcEI7QUFDQUEsWUFBUXRDLE1BQVIsR0FBaUJzQyxRQUFRdEMsTUFBUixDQUFlaUQsSUFBZixDQUFvQlgsT0FBcEIsQ0FBakI7QUFDQUEsWUFBUVksUUFBUjtBQUNBLFdBQU9aLE9BQVA7QUFDRDtBQUNEdkMsWUFBVW9ELEVBQVYsRUFBYztBQUNaLFFBQUksS0FBS04sU0FBVCxFQUFvQjtBQUNsQixXQUFLQSxTQUFMLEdBQWlCLEtBQWpCO0FBQ0EsV0FBS0YsV0FBTCxHQUFtQixJQUFuQjs7QUFFQSxVQUFJLEtBQUtJLE9BQUwsSUFBZ0IsSUFBcEIsRUFBMEI7QUFDeEIsYUFBS0EsT0FBTCxDQUFhakUsS0FBYixHQUFxQnFFLEVBQXJCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS0osT0FBTCxHQUFlLElBQUloRSxPQUFKLENBQVlvRSxFQUFaLENBQWY7QUFDRDs7QUFFRCxXQUFLWCxJQUFMLEdBQVksS0FBS08sT0FBakI7QUFDQSxXQUFLRyxRQUFMO0FBQ0Q7QUFDRjtBQUNEbEQsU0FBT2dELE9BQVAsRUFBZ0I7QUFDZCxRQUFJLEtBQUtILFNBQVQsRUFBb0I7QUFDbEIsV0FBS0EsU0FBTCxHQUFpQixLQUFqQjtBQUNBLFdBQUtGLFdBQUwsR0FBbUIsSUFBbkI7O0FBRUEsVUFBSSxLQUFLSyxPQUFMLElBQWdCLElBQXBCLEVBQTBCO0FBQ3hCLGFBQUtBLE9BQUwsQ0FBYS9FLEtBQWIsR0FBcUIrRSxPQUFyQjtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtBLE9BQUwsR0FBZSxJQUFJL0QsSUFBSixDQUFTK0QsT0FBVCxDQUFmO0FBQ0Q7O0FBRUQsV0FBS1IsSUFBTCxHQUFZLEtBQUtRLE9BQWpCO0FBQ0EsV0FBS0UsUUFBTDtBQUNEO0FBQ0Y7QUFDREUsT0FBS0MsSUFBTCxFQUFtQjtBQUNqQixRQUFJLEtBQUtULFFBQVQsRUFBbUI7QUFDakIsV0FBS0EsUUFBTCxHQUFnQixLQUFoQjtBQUNBLFVBQUksS0FBS0osSUFBTCxDQUFVbEMsS0FBZCxFQUFxQjtBQUNuQixhQUFLa0MsSUFBTCxDQUFVbEMsS0FBVixDQUFnQixLQUFLcUMsV0FBckI7QUFDRDtBQUNGO0FBQ0Y7QUFDRE8sYUFBVztBQUNULFFBQUksS0FBS0osUUFBVCxFQUFtQjtBQUNqQixXQUFLQSxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsV0FBS1EsSUFBTDtBQUNEO0FBQ0Y7QUFDREEsU0FBTztBQUNMLFVBQU1oQixVQUFVLElBQWhCO0FBQ0EsV0FBT0EsUUFBUU0sUUFBZixFQUF5QjtBQUN2QixZQUFNSixPQUFPRixRQUFRRSxJQUFyQjtBQUNBLGNBQVFBLEtBQUtuQyxJQUFiO0FBQ0UsYUFBSyxTQUFMO0FBQWdCO0FBQ2Qsa0JBQU1sQixPQUF1QnFELElBQTdCOztBQUVBLG1CQUNFRixRQUFRQyxRQUFSLEdBQW1CRCxRQUFRRyxLQUFSLENBQWNjLE1BQWpDLElBQ0FqQixRQUFRRyxLQUFSLENBQWNILFFBQVFDLFFBQXRCLGFBQTJDTCxLQUY3QyxFQUdFO0FBQ0FJLHNCQUFRQyxRQUFSO0FBQ0Q7O0FBR0QsZ0JBQUlELFFBQVFDLFFBQVIsSUFBb0JELFFBQVFHLEtBQVIsQ0FBY2MsTUFBdEMsRUFBOEM7QUFDNUMsa0JBQUlqQixRQUFRekQsT0FBUixJQUFtQixJQUF2QixFQUE2QjtBQUMzQnlELHdCQUFRekQsT0FBUixDQUFnQk0sS0FBS0wsS0FBckI7QUFDRDtBQUNEO0FBQ0Q7O0FBR0Qsa0JBQU04QyxPQUFPVSxRQUFRRyxLQUFSLENBQWNILFFBQVFDLFFBQVIsRUFBZCxDQUFiO0FBQ0EsZ0JBQUlYLGdCQUFnQkUsSUFBcEIsRUFBMEI7QUFDeEJRLHNCQUFRRSxJQUFSLEdBQWVaLEtBQUtwQixJQUFMLENBQVVyQixLQUFLTCxLQUFmLENBQWY7QUFDRDs7QUFFRDtBQUNEO0FBQ0QsYUFBSyxNQUFMO0FBQWE7QUFDWCxrQkFBTUssT0FBb0JxRCxJQUExQjs7QUFFQSxtQkFDRUYsUUFBUUMsUUFBUixHQUFtQkQsUUFBUUcsS0FBUixDQUFjYyxNQUFqQyxJQUNBakIsUUFBUUcsS0FBUixDQUFjSCxRQUFRQyxRQUF0QixhQUEyQ1QsSUFGN0MsRUFHRTtBQUNBUSxzQkFBUUMsUUFBUjtBQUNEOztBQUdELGdCQUFJLEtBQUtBLFFBQUwsSUFBaUJELFFBQVFHLEtBQVIsQ0FBY2MsTUFBbkMsRUFBMkM7QUFDekMsa0JBQUlqQixRQUFRdEQsSUFBUixJQUFnQixJQUFwQixFQUEwQjtBQUN4QnNELHdCQUFRdEQsSUFBUixDQUFhRyxLQUFLbEIsS0FBbEI7QUFDRDs7QUFFRDtBQUNEOztBQUdELGtCQUFNdUYsU0FBU2xCLFFBQVFHLEtBQVIsQ0FBY0gsUUFBUUMsUUFBUixFQUFkLENBQWY7QUFDQSxnQkFBSWlCLGtCQUFrQnRCLEtBQXRCLEVBQTZCO0FBQzNCSSxzQkFBUUUsSUFBUixHQUFlZ0IsT0FBTzFDLE1BQVAsQ0FBYzNCLEtBQUtsQixLQUFuQixDQUFmO0FBQ0Q7O0FBRUQ7QUFDRDtBQUNELGFBQUssTUFBTDtBQUFhO0FBQ1gsa0JBQU1rQixPQUF1QnFELElBQTdCO0FBQ0EsZ0JBQUlGLFFBQVFDLFFBQVIsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJELHNCQUFRRyxLQUFSLENBQWNnQixPQUFkLENBQXNCdEUsSUFBdEI7QUFDRCxhQUZELE1BRU87QUFDTG1ELHNCQUFRRyxLQUFSLENBQWMsRUFBRUgsUUFBUUMsUUFBeEIsSUFBb0NwRCxJQUFwQztBQUNEOztBQUVEbUQsb0JBQVFFLElBQVIsR0FBZXJELEtBQUtBLElBQXBCOztBQUVBO0FBQ0Q7QUFDRCxhQUFLLE9BQUw7QUFBYztBQUNaLGtCQUFNQSxPQUF3QnFELElBQTlCO0FBQ0EsZ0JBQUlGLFFBQVFDLFFBQVIsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJELHNCQUFRRyxLQUFSLENBQWNnQixPQUFkLENBQXNCdEUsSUFBdEI7QUFDRCxhQUZELE1BRU87QUFDTG1ELHNCQUFRRyxLQUFSLENBQWMsRUFBRUgsUUFBUUMsUUFBeEIsSUFBb0NwRCxJQUFwQztBQUNEOztBQUVEbUQsb0JBQVFFLElBQVIsR0FBZXJELEtBQUtBLElBQXBCOztBQUVBO0FBQ0Q7QUFDRDtBQUFTO0FBQ1Asa0JBQU1BLE9BQU9xRCxJQUFiO0FBQ0FGLG9CQUFRTyxTQUFSLEdBQW9CLElBQXBCO0FBQ0FQLG9CQUFRSyxXQUFSLEdBQXNCeEQsS0FBS1csSUFBTCxDQUFVd0MsUUFBUXZDLFNBQWxCLEVBQTZCdUMsUUFBUXRDLE1BQXJDLENBQXRCO0FBQ0FzQyxvQkFBUVEsUUFBUixHQUFtQlIsUUFBUU8sU0FBM0I7QUFDQSxnQkFBSSxLQUFLQSxTQUFULEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQ7QUFDRDtBQXhGSDtBQTBGRDtBQUNGO0FBbkx5QyIsImZpbGUiOiJ0YXNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHR5cGUgeyBBZGRyZXNzIH0gZnJvbSBcIi4vc2lnbmFsXCJcbmltcG9ydCB7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWVcbn0gZnJvbSBcIi4vcHJlZW1wdGl2ZS1hbmltYXRpb24tZnJhbWVcIlxuXG5leHBvcnQgdHlwZSBUaHJlYWRJRCA9IG51bWJlclxuZXhwb3J0IHR5cGUgVGltZSA9IG51bWJlclxuZXhwb3J0IHR5cGUgUHJvY2Vzc0lEID0gbnVtYmVyXG5cbmNvbnN0IHJhaXNlID0gZXJyb3IgPT4ge1xuICB0aHJvdyBFcnJvcihcbiAgICBgVGFzayB3YXMgbm90IHN1cHBvc2V0IHRvIG5ldmVyIGZhaWwgYnV0IGl0IGRpZCBmYWlsIHdpdGggZXJyb3IgJHtlcnJvcn1gXG4gIClcbn1cblxuY29uc3QgaWdub3JlID0gXyA9PiB2b2lkIDBcblxuZXhwb3J0IGludGVyZmFjZSBQcm9jZXNzPGVycm9yLCB2YWx1ZSwgbWVzc2FnZSwgcmVhc29uPiB7XG4gIGlkOiBQcm9jZXNzSUQsXG4gIGlzQWN0aXZlOiBib29sZWFuLFxuICBraWxsKHJlc29uOiByZWFzb24pOiB2b2lkXG59XG5cbmV4cG9ydCBjbGFzcyBUYXNrPHgsIGE+IHtcbiAgc3RhdGljIGNyZWF0ZTx4LCBhPihcbiAgICBleGVjdXRlOiAoc3VjY2VlZDogKGE6IGEpID0+IHZvaWQsIGZhaWw6ICh4OiB4KSA9PiB2b2lkKSA9PiB2b2lkXG4gICk6IFRhc2s8eCwgYT4ge1xuICAgIGNvbnNvbGUud2FybihcIlRhc2suY3JlYXRlIGlzIGRlcHJlY2F0ZWQgQVBJIHVzZSBuZXcgVGFzayBpbnN0ZWFkXCIpXG4gICAgcmV0dXJuIG5ldyBUYXNrKGV4ZWN1dGUpXG4gIH1cbiAgc3RhdGljIGZ1dHVyZTx4LCBhPihyZXF1ZXN0OiAoKSA9PiBQcm9taXNlPGE+KTogVGFzazx4LCBhPiB7XG4gICAgY29uc29sZS53YXJuKFwiVGFzay5mdXR1cmUgaXMgZGVwcmVjYXRlZCBBUEkgdXNlIG5ldyBUYXNrIGluc3RlYWRcIilcbiAgICByZXR1cm4gbmV3IEZ1dHVyZShyZXF1ZXN0KVxuICB9XG4gIHN0YXRpYyBzdWNjZWVkPHgsIGE+KHZhbHVlOiBhKTogVGFzazx4LCBhPiB7XG4gICAgcmV0dXJuIG5ldyBTdWNjZWVkKHZhbHVlKVxuICB9XG5cbiAgc3RhdGljIGZhaWw8eCwgYT4oZXJyb3I6IHgpOiBUYXNrPHgsIGE+IHtcbiAgICByZXR1cm4gbmV3IEZhaWwoZXJyb3IpXG4gIH1cblxuICBzdGF0aWMgc3Bhd248eCwgeSwgYT4odGFzazogVGFzazx4LCBhPik6IFRhc2s8eSwgVGhyZWFkSUQ+IHtcbiAgICByZXR1cm4gbmV3IFNwYXduKHRhc2spXG4gIH1cblxuICBzdGF0aWMgc2xlZXA8eD4odGltZTogVGltZSk6IFRhc2s8eCwgdm9pZD4ge1xuICAgIHJldHVybiBuZXcgU2xlZXAodGltZSlcbiAgfVxuXG4gIHN0YXRpYyByZXF1ZXN0QW5pbWF0aW9uRnJhbWU8eD4oKTogVGFzazx4LCBUaW1lPiB7XG4gICAgcmV0dXJuIG5ldyBBbmltYXRpb25GcmFtZSgpXG4gIH1cblxuICBzdGF0aWMgc2VuZDx4LCBhPihhZGRyZXNzOiBBZGRyZXNzPGE+LCBtZXNzYWdlOiBhKTogVGFzazx4LCB2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBTZW5kKGFkZHJlc3MsIG1lc3NhZ2UpXG4gIH1cblxuICBzdGF0aWMgZm9yazx4LCBhLCBtZXNzYWdlLCByZWFzb24+KFxuICAgIHRhc2s6IFRhc2s8eCwgYT4sXG4gICAgb25TdWNjZWVkOiAoYTogYSkgPT4gdm9pZCxcbiAgICBvbkZhaWw6ICh4OiB4KSA9PiB2b2lkXG4gICk6IFByb2Nlc3M8eCwgYSwgbWVzc2FnZSwgcmVhc29uPiB7XG4gICAgcmV0dXJuIFRocmVhZC5mb3JrKHRhc2ssIG9uU3VjY2VlZCwgb25GYWlsKVxuICB9XG5cbiAgc3RhdGljIHBlcmZvcm0odGFzazogVGFzazxlbXB0eSwgdm9pZD4pOiB2b2lkIHtcbiAgICBUaHJlYWQuZm9yayh0YXNrLCBpZ25vcmUsIHJhaXNlKVxuICB9XG5cbiAgY29uc3RydWN0b3I8aGFuZGxlPihcbiAgICBleGVjdXRlOiA/KHN1Y2NlZWQ6IChhOiBhKSA9PiB2b2lkLCBmYWlsOiAoeDogeCkgPT4gdm9pZCkgPT4gaGFuZGxlLFxuICAgIGNhbmNlbDogPyhoYW5kbGU6IGhhbmRsZSkgPT4gdm9pZFxuICApIHtcbiAgICB0aGlzLnR5cGUgPSBcIlRhc2tcIlxuICAgIGNvbnN0IHRhc2sgPSAodGhpczogYW55KVxuICAgIGlmIChleGVjdXRlICE9IG51bGwpIHtcbiAgICAgIHRhc2suZm9yayA9IGV4ZWN1dGVcbiAgICB9XG4gICAgaWYgKGNhbmNlbCAhPSBudWxsKSB7XG4gICAgICB0YXNrLmFib3J0ID0gY2FuY2VsXG4gICAgfVxuICB9XG4gIGNoYWluPGI+KG5leHQ6IChhOiBhKSA9PiBUYXNrPHgsIGI+KTogVGFzazx4LCBiPiB7XG4gICAgcmV0dXJuIG5ldyBDaGFpbih0aGlzLCBuZXh0KVxuICB9XG4gIG1hcDxiPihmOiAoaW5wdXQ6IGEpID0+IGIpOiBUYXNrPHgsIGI+IHtcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzLCBmKVxuICB9XG4gIGNhcHR1cmU8eT4oaGFuZGxlOiAoZXJyb3I6IHgpID0+IFRhc2s8eSwgYT4pOiBUYXNrPHksIGE+IHtcbiAgICByZXR1cm4gbmV3IENhcHR1cmUodGhpcywgaGFuZGxlKVxuICB9XG4gIGZvcm1hdDx5PihmOiAoaW5wdXQ6IHgpID0+IHkpOiBUYXNrPHksIGE+IHtcbiAgICByZXR1cm4gbmV3IEZvcm1hdCh0aGlzLCBmKVxuICB9XG4gIHJlY292ZXI8eT4ocmVnYWluOiAoZXJyb3I6IHgpID0+IGEpOiBUYXNrPHksIGE+IHtcbiAgICByZXR1cm4gbmV3IFJlY292ZXIodGhpcywgcmVnYWluKVxuICB9XG4gIGZvcmsoc3VjY2VlZDogKGE6IGEpID0+IHZvaWQsIGZhaWw6ICh4OiB4KSA9PiB2b2lkKTogKiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShzdWNjZWVkLCBmYWlsKVxuICB9XG4gIGFib3J0KHRva2VuOiAqKTogdm9pZCB7XG4gICAgcmV0dXJuIHRoaXMuY2FuY2VsKHRva2VuKVxuICB9XG5cbiAgdHlwZTogKlxuICBleGVjdXRlOiAoc3VjY2VlZDogKGE6IGEpID0+IHZvaWQsIGZhaWw6ICh4OiB4KSA9PiB2b2lkKSA9PiAqXG4gIGNhbmNlbDogKGhhbmRsZTogKikgPT4gdm9pZFxufVxuXG5jbGFzcyBTdWNjZWVkPHgsIGE+IGV4dGVuZHMgVGFzazx4LCBhPiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBhKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudHlwZSA9IFwiU3VjY2VlZFwiXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gIH1cbiAgZm9yayhzdWNjZWVkOiAoYTogYSkgPT4gdm9pZCwgZmFpbDogKHg6IHgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBzdWNjZWVkKHRoaXMudmFsdWUpXG4gIH1cblxuICB0eXBlOiBcIlN1Y2NlZWRcIlxuICB2YWx1ZTogYVxufVxuXG5jbGFzcyBGYWlsPHgsIGE+IGV4dGVuZHMgVGFzazx4LCBhPiB7XG4gIGNvbnN0cnVjdG9yKGVycm9yOiB4KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudHlwZSA9IFwiRmFpbFwiXG4gICAgdGhpcy5lcnJvciA9IGVycm9yXG4gIH1cbiAgZm9yayhzdWNjZWVkOiAoYTogYSkgPT4gdm9pZCwgZmFpbDogKHg6IHgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBmYWlsKHRoaXMuZXJyb3IpXG4gIH1cblxuICB0eXBlOiBcIkZhaWxcIlxuICBlcnJvcjogeFxufVxuXG5jbGFzcyBTbGVlcDx4LCBhOiB2b2lkPiBleHRlbmRzIFRhc2s8eCwgdm9pZD4ge1xuICBjb25zdHJ1Y3Rvcih0aW1lOiBUaW1lKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudGltZSA9IHRpbWVcbiAgfVxuICBmb3JrKHN1Y2NlZWQ6IChhOiBhKSA9PiB2b2lkLCBmYWlsOiAoeDogeCkgPT4gdm9pZCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoc3VjY2VlZCwgdGhpcy50aW1lLCB2b2lkIDApXG4gIH1cbiAgYWJvcnQoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dChpZClcbiAgfVxuXG4gIHRpbWU6IFRpbWVcbn1cblxuY2xhc3MgQW5pbWF0aW9uRnJhbWU8eD4gZXh0ZW5kcyBUYXNrPHgsIFRpbWU+IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICB9XG4gIGZvcmsoc3VjY2VlZDogKGE6IFRpbWUpID0+IHZvaWQsIGZhaWw6ICh4OiB4KSA9PiB2b2lkKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN1Y2NlZWQpXG4gIH1cbiAgYWJvcnQoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKVxuICB9XG59XG5cbmxldCB0aHJlYWRJRCA9IDBcbmNsYXNzIFNwYXduPHgsIHksIGE+IGV4dGVuZHMgVGFzazx5LCBUaHJlYWRJRD4ge1xuICBjb25zdHJ1Y3Rvcih0YXNrOiBUYXNrPHgsIGE+KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudGFzayA9IHRhc2tcbiAgfVxuICBmb3JrKHN1Y2NlZWQ6IChhOiBUaHJlYWRJRCkgPT4gdm9pZCwgZmFpbDogKHg6IHkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBQcm9taXNlLnJlc29sdmUobnVsbCkudGhlbihfID0+IFRhc2suZm9yayh0aGlzLnRhc2ssIG5vb3AsIG5vb3ApKVxuXG4gICAgc3VjY2VlZCgrK3RocmVhZElEKVxuICB9XG5cbiAgdGFzazogVGFzazx4LCBhPlxufVxuXG5jbGFzcyBTZW5kPHgsIGE+IGV4dGVuZHMgVGFzazx4LCB2b2lkPiB7XG4gIGNvbnN0cnVjdG9yKGFkZHJlc3M6IEFkZHJlc3M8YT4sIG1lc3NhZ2U6IGEpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3NcbiAgfVxuICBmb3JrKHN1Y2NlZWQ6IChhOiB2b2lkKSA9PiB2b2lkLCBmYWlsOiAoeDogeCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHN1Y2NlZWQodm9pZCB0aGlzLmFkZHJlc3ModGhpcy5tZXNzYWdlKSlcbiAgfVxuXG4gIG1lc3NhZ2U6IGFcbiAgYWRkcmVzczogQWRkcmVzczxhPlxufVxuXG5jbGFzcyBGdXR1cmU8eCwgYT4gZXh0ZW5kcyBUYXNrPHgsIGE+IHtcbiAgY29uc3RydWN0b3IocmVxdWVzdDogKCkgPT4gUHJvbWlzZTxhPikge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0XG4gIH1cbiAgZm9yayhzdWNjZWVkOiAoYTogYSkgPT4gdm9pZCwgZmFpbDogKHg6IHgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnJlcXVlc3QoKS50aGVuKHN1Y2NlZWQsIGZhaWwpXG4gIH1cblxuICByZXF1ZXN0OiAoKSA9PiBQcm9taXNlPGE+XG59XG5cbmNsYXNzIFRoZW48eCwgYSwgYj4gZXh0ZW5kcyBUYXNrPHgsIGI+IHtcbiAgY29uc3RydWN0b3IodGFzazogVGFzazx4LCBhPikge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnR5cGUgPSBcIlRoZW5cIlxuICAgIHRoaXMudGFzayA9IHRhc2tcbiAgfVxuICBmb3JrKHN1Y2NlZWQ6ICh2YWx1ZTogYikgPT4gdm9pZCwgZmFpbDogKGVycm9yOiB4KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy50YXNrLmZvcmsoXG4gICAgICAodmFsdWU6IGEpOiB2b2lkID0+IHZvaWQgdGhpcy5uZXh0KHZhbHVlKS5mb3JrKHN1Y2NlZWQsIGZhaWwpLFxuICAgICAgZmFpbFxuICAgIClcbiAgfVxuICBuZXh0KGlucHV0OiBhKTogVGFzazx4LCBiPiB7XG4gICAgdGhyb3cgRXJyb3IoXCJTdWJjbGFzcyBvZiBhYnNyYWN0IFRoZW4gbXVzdCBpbXBsZW1lbnQgbmV4dCBtZXRob2RcIilcbiAgfVxuXG4gIHR5cGU6IFwiVGhlblwiXG4gIHRhc2s6IFRhc2s8eCwgYT5cbn1cblxuY2xhc3MgQ2hhaW48eCwgYSwgYj4gZXh0ZW5kcyBUaGVuPHgsIGEsIGI+IHtcbiAgY29uc3RydWN0b3IodGFzazogVGFzazx4LCBhPiwgbmV4dDogKGlucHV0OiBhKSA9PiBUYXNrPHgsIGI+KSB7XG4gICAgc3VwZXIodGFzaylcbiAgICB0aGlzLmNoYWluZXIgPSBuZXh0XG4gIH1cbiAgbmV4dChpbnB1dDogYSk6IFRhc2s8eCwgYj4ge1xuICAgIHJldHVybiB0aGlzLmNoYWluZXIoaW5wdXQpXG4gIH1cblxuICBjaGFpbmVyOiAoaW5wdXQ6IGEpID0+IFRhc2s8eCwgYj5cbn1cblxuY2xhc3MgTWFwPHgsIGEsIGI+IGV4dGVuZHMgVGhlbjx4LCBhLCBiPiB7XG4gIGNvbnN0cnVjdG9yKHRhc2s6IFRhc2s8eCwgYT4sIG1hcHBlcjogKGlucHV0OiBhKSA9PiBiKSB7XG4gICAgLy8gTm90ZTogSGFkIHRvIHRyaWNrIGZsb3cgaW50byB0aGlua2luZyB0aGF0IGBGb3JtYXQucHJvdG90eXBlLmhhbmRsZWAgd2FzXG4gICAgLy8gcGFzc2VkLCBvdGhlcndpc2UgaXQgZmFpbHMgdG8gaW5mZXIgcG9seW1vcnBoaWMgbmF0dXJlLlxuICAgIHN1cGVyKHRhc2spXG4gICAgdGhpcy5tYXBwZXIgPSBtYXBwZXJcbiAgfVxuICBuZXh0KGlucHV0OiBhKTogVGFzazx4LCBiPiB7XG4gICAgcmV0dXJuIG5ldyBTdWNjZWVkKHRoaXMubWFwcGVyKGlucHV0KSlcbiAgfVxuXG4gIG1hcHBlcjogKGlucHV0OiBhKSA9PiBiXG59XG5cbmNsYXNzIENhdGNoPHgsIHksIGE+IGV4dGVuZHMgVGFzazx5LCBhPiB7XG4gIGNvbnN0cnVjdG9yKHRhc2s6IFRhc2s8eCwgYT4pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50eXBlID0gXCJDYXRjaFwiXG4gICAgdGhpcy50YXNrID0gdGFza1xuICB9XG4gIGZvcmsoc3VjY2VlZDogKHZhbHVlOiBhKSA9PiB2b2lkLCBmYWlsOiAoZXJyb3I6IHkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnRhc2suZm9yayhcbiAgICAgIHN1Y2NlZWQsXG4gICAgICBlcnJvciA9PiB2b2lkIHRoaXMuaGFuZGxlKGVycm9yKS5mb3JrKHN1Y2NlZWQsIGZhaWwpXG4gICAgKVxuICB9XG4gIGhhbmRsZShlcnJvcjogeCk6IFRhc2s8eSwgYT4ge1xuICAgIHRocm93IEVycm9yKFwiU3ViY2xhc3Mgb2YgYWJzcmFjdCBDYXRjaCBtdXN0IGltcGxlbWVudCBoYW5kbGUgbWV0aG9kXCIpXG4gIH1cblxuICB0eXBlOiBcIkNhdGNoXCJcbiAgdGFzazogVGFzazx4LCBhPlxufVxuXG5jbGFzcyBDYXB0dXJlPHgsIHksIGE+IGV4dGVuZHMgQ2F0Y2g8eCwgeSwgYT4ge1xuICBjb25zdHJ1Y3Rvcih0YXNrOiBUYXNrPHgsIGE+LCBoYW5kbGU6IChlcnJvcjogeCkgPT4gVGFzazx5LCBhPikge1xuICAgIHN1cGVyKHRhc2spXG4gICAgdGhpcy5jYXB0dXJlciA9IGhhbmRsZVxuICB9XG5cbiAgaGFuZGxlKGVycm9yOiB4KTogVGFzazx5LCBhPiB7XG4gICAgcmV0dXJuIHRoaXMuY2FwdHVyZXIoZXJyb3IpXG4gIH1cblxuICBjYXB0dXJlcjogKGVycm9yOiB4KSA9PiBUYXNrPHksIGE+XG59XG5cbmNsYXNzIFJlY292ZXI8eCwgeSwgYT4gZXh0ZW5kcyBDYXRjaDx4LCB5LCBhPiB7XG4gIGNvbnN0cnVjdG9yKHRhc2s6IFRhc2s8eCwgYT4sIHJlZ2FpbjogKGVycm9yOiB4KSA9PiBhKSB7XG4gICAgc3VwZXIodGFzaylcbiAgICB0aGlzLnJlZ2FpbiA9IHJlZ2FpblxuICB9XG4gIGhhbmRsZShlcnJvcjogeCk6IFRhc2s8eSwgYT4ge1xuICAgIHJldHVybiBuZXcgU3VjY2VlZCh0aGlzLnJlZ2FpbihlcnJvcikpXG4gIH1cblxuICByZWdhaW46IChlcnJvcjogeCkgPT4gYVxufVxuXG5jbGFzcyBGb3JtYXQ8eCwgeSwgYT4gZXh0ZW5kcyBDYXRjaDx4LCB5LCBhPiB7XG4gIGNvbnN0cnVjdG9yKHRhc2s6IFRhc2s8eCwgYT4sIGZvcm1hdHRlcjogKGVycm9yOiB4KSA9PiB5KSB7XG4gICAgc3VwZXIodGFzaylcbiAgICB0aGlzLmZvcm1hdHRlciA9IGZvcm1hdHRlclxuICB9XG4gIGhhbmRsZShlcnJvcjogeCk6IFRhc2s8eSwgYT4ge1xuICAgIHJldHVybiBuZXcgRmFpbCh0aGlzLmZvcm1hdHRlcihlcnJvcikpXG4gIH1cblxuICBmb3JtYXR0ZXI6IChlcnJvcjogeCkgPT4geVxufVxuXG5jb25zdCBub29wID0gKCkgPT4gdm9pZCAwXG5cbmxldCBuZXh0SUQgPSAwXG5cbnR5cGUgUm9vdDx4LCBhPiA9XG4gIHwgU3VjY2VlZDx4LCBhPlxuICB8IEZhaWw8eCwgYT5cbiAgfCBUaGVuPHgsICosIGE+XG4gIHwgQ2F0Y2g8KiwgeCwgYT5cbiAgfCBUYXNrPHgsIGE+XG5cbmNsYXNzIFRocmVhZDxlcnJvciwgdmFsdWUsIG1lc3NhZ2UsIHJlYXNvbj4ge1xuICBpZDogUHJvY2Vzc0lEXG4gIHJvb3Q6IFJvb3Q8KiwgKj5cbiAgc3RhY2s6IEFycmF5PENhdGNoPCosICosICo+IHwgVGhlbjwqLCAqLCAqPj5cbiAgcG9zaXRpb246IG51bWJlclxuICBtYWlsYm94OiBBcnJheTxtZXNzYWdlPlxuICBhYm9ydEhhbmRsZTogKlxuICBpc0FjdGl2ZTogYm9vbGVhblxuICBzdWNjZWVkOiAoaW5wdXQ6IHZhbHVlKSA9PiB2b2lkXG4gIGZhaWw6IChlcnJvcjogZXJyb3IpID0+IHZvaWRcbiAgaXNQZW5kaW5nOiBib29sZWFuXG4gIGlzUGF1c2VkOiBib29sZWFuXG4gIHN1Y2Nlc3M6ID9TdWNjZWVkPCosICo+XG4gIGZhaWx1cmU6ID9GYWlsPCosICo+XG4gIG9uU3VjY2VlZDogPHZhbHVlPihpbnB1dDogdmFsdWUpID0+IHZvaWRcbiAgb25GYWlsOiA8ZXJyb3I+KGVycm9yOiBlcnJvcikgPT4gdm9pZFxuICBzdGF0aWMgZm9yazxlcnJvciwgdmFsdWUsIG1lc3NhZ2UsIHJlYXNvbj4oXG4gICAgdGFzazogVGFzazxlcnJvciwgdmFsdWU+LFxuICAgIG9uU3VjY2VlZDogKGlucHV0OiB2YWx1ZSkgPT4gdm9pZCxcbiAgICBvbkZhaWw6IChlcnJvcjogZXJyb3IpID0+IHZvaWRcbiAgKTogUHJvY2VzczxlcnJvciwgdmFsdWUsIG1lc3NhZ2UsIHJlYXNvbj4ge1xuICAgIGNvbnN0IHByb2Nlc3MgPSBuZXcgVGhyZWFkKClcbiAgICBwcm9jZXNzLmlkID0gKytuZXh0SURcbiAgICBwcm9jZXNzLnBvc2l0aW9uID0gMFxuICAgIHByb2Nlc3Mucm9vdCA9IHRhc2tcbiAgICBwcm9jZXNzLnN0YWNrID0gW11cbiAgICBwcm9jZXNzLm1haWxib3ggPSBbXVxuICAgIHByb2Nlc3MuYWJvcnRIYW5kbGUgPSBudWxsXG4gICAgcHJvY2Vzcy5pc0FjdGl2ZSA9IHRydWVcbiAgICBwcm9jZXNzLmlzUGVuZGluZyA9IGZhbHNlXG4gICAgcHJvY2Vzcy5pc1BhdXNlZCA9IHRydWVcbiAgICBwcm9jZXNzLnN1Y2Nlc3MgPSBudWxsXG4gICAgcHJvY2Vzcy5mYWlsdXJlID0gbnVsbFxuICAgIHByb2Nlc3Muc3VjY2VlZCA9IG9uU3VjY2VlZFxuICAgIHByb2Nlc3MuZmFpbCA9IG9uRmFpbFxuICAgIHByb2Nlc3Mub25TdWNjZWVkID0gcHJvY2Vzcy5vblN1Y2NlZWQuYmluZChwcm9jZXNzKVxuICAgIHByb2Nlc3Mub25GYWlsID0gcHJvY2Vzcy5vbkZhaWwuYmluZChwcm9jZXNzKVxuICAgIHByb2Nlc3Muc2NoZWR1bGUoKVxuICAgIHJldHVybiBwcm9jZXNzXG4gIH1cbiAgb25TdWNjZWVkKG9rKSB7XG4gICAgaWYgKHRoaXMuaXNQZW5kaW5nKSB7XG4gICAgICB0aGlzLmlzUGVuZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLmFib3J0SGFuZGxlID0gbnVsbFxuXG4gICAgICBpZiAodGhpcy5zdWNjZXNzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdWNjZXNzLnZhbHVlID0gb2tcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3VjY2VzcyA9IG5ldyBTdWNjZWVkKG9rKVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJvb3QgPSB0aGlzLnN1Y2Nlc3NcbiAgICAgIHRoaXMuc2NoZWR1bGUoKVxuICAgIH1cbiAgfVxuICBvbkZhaWwoZmFpbHVyZSkge1xuICAgIGlmICh0aGlzLmlzUGVuZGluZykge1xuICAgICAgdGhpcy5pc1BlbmRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy5hYm9ydEhhbmRsZSA9IG51bGxcblxuICAgICAgaWYgKHRoaXMuZmFpbHVyZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZmFpbHVyZS5lcnJvciA9IGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmFpbHVyZSA9IG5ldyBGYWlsKGZhaWx1cmUpXG4gICAgICB9XG5cbiAgICAgIHRoaXMucm9vdCA9IHRoaXMuZmFpbHVyZVxuICAgICAgdGhpcy5zY2hlZHVsZSgpXG4gICAgfVxuICB9XG4gIGtpbGwoZXhpdDogcmVhc29uKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZVxuICAgICAgaWYgKHRoaXMucm9vdC5hYm9ydCkge1xuICAgICAgICB0aGlzLnJvb3QuYWJvcnQodGhpcy5hYm9ydEhhbmRsZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2NoZWR1bGUoKSB7XG4gICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZVxuICAgICAgdGhpcy5zdGVwKClcbiAgICB9XG4gIH1cbiAgc3RlcCgpIHtcbiAgICBjb25zdCBwcm9jZXNzID0gdGhpc1xuICAgIHdoaWxlIChwcm9jZXNzLmlzQWN0aXZlKSB7XG4gICAgICBjb25zdCByb290ID0gcHJvY2Vzcy5yb290XG4gICAgICBzd2l0Y2ggKHJvb3QudHlwZSkge1xuICAgICAgICBjYXNlIFwiU3VjY2VlZFwiOiB7XG4gICAgICAgICAgY29uc3QgdGFzazogU3VjY2VlZDwqLCAqPiA9IChyb290OiBhbnkpXG4gICAgICAgICAgLy8gSWYgdGFzayBzdWNjZWVkZWQgc2tpcCBhbGwgdGhlIGVycm9yIGhhbmRsaW5nLlxuICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgIHByb2Nlc3MucG9zaXRpb24gPCBwcm9jZXNzLnN0YWNrLmxlbmd0aCAmJlxuICAgICAgICAgICAgcHJvY2Vzcy5zdGFja1twcm9jZXNzLnBvc2l0aW9uXSBpbnN0YW5jZW9mIENhdGNoXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnBvc2l0aW9uKytcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiBlbmQgb2YgdGhlIHN0YWNrIGlzIHJlYWNoZWQgdGhlbiBicmVha1xuICAgICAgICAgIGlmIChwcm9jZXNzLnBvc2l0aW9uID49IHByb2Nlc3Muc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5zdWNjZWVkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdWNjZWVkKHRhc2sudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPdGhlcndpc2Ugc3RlcCBpbnRvIG5leHQgdGFzay5cbiAgICAgICAgICBjb25zdCB0aGVuID0gcHJvY2Vzcy5zdGFja1twcm9jZXNzLnBvc2l0aW9uKytdXG4gICAgICAgICAgaWYgKHRoZW4gaW5zdGFuY2VvZiBUaGVuKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnJvb3QgPSB0aGVuLm5leHQodGFzay52YWx1ZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJGYWlsXCI6IHtcbiAgICAgICAgICBjb25zdCB0YXNrOiBGYWlsPCosICo+ID0gKHJvb3Q6IGFueSlcbiAgICAgICAgICAvLyBJZiB0YXNrIGZhaWxzIHNraXAgYWxsIHRoZSBjaGFpbmluZy5cbiAgICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICBwcm9jZXNzLnBvc2l0aW9uIDwgcHJvY2Vzcy5zdGFjay5sZW5ndGggJiZcbiAgICAgICAgICAgIHByb2Nlc3Muc3RhY2tbcHJvY2Vzcy5wb3NpdGlvbl0gaW5zdGFuY2VvZiBUaGVuXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwcm9jZXNzLnBvc2l0aW9uKytcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiBlbmQgb2YgdGhlIHN0YWNrIGlzIHJlYWNoZWQgdGhlbiBicmVhay5cbiAgICAgICAgICBpZiAodGhpcy5wb3NpdGlvbiA+PSBwcm9jZXNzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZmFpbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZmFpbCh0YXNrLmVycm9yKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPdGhlcndpc2Ugc3RlcCBpbnRvIG5leHQgdGFzay5cbiAgICAgICAgICBjb25zdCBfY2F0Y2ggPSBwcm9jZXNzLnN0YWNrW3Byb2Nlc3MucG9zaXRpb24rK11cbiAgICAgICAgICBpZiAoX2NhdGNoIGluc3RhbmNlb2YgQ2F0Y2gpIHtcbiAgICAgICAgICAgIHByb2Nlc3Mucm9vdCA9IF9jYXRjaC5oYW5kbGUodGFzay5lcnJvcilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJUaGVuXCI6IHtcbiAgICAgICAgICBjb25zdCB0YXNrOiBUaGVuPCosICosICo+ID0gKHJvb3Q6IGFueSlcbiAgICAgICAgICBpZiAocHJvY2Vzcy5wb3NpdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgcHJvY2Vzcy5zdGFjay51bnNoaWZ0KHRhc2spXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3Muc3RhY2tbLS1wcm9jZXNzLnBvc2l0aW9uXSA9IHRhc2tcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwcm9jZXNzLnJvb3QgPSB0YXNrLnRhc2tcblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkNhdGNoXCI6IHtcbiAgICAgICAgICBjb25zdCB0YXNrOiBDYXRjaDwqLCAqLCAqPiA9IChyb290OiBhbnkpXG4gICAgICAgICAgaWYgKHByb2Nlc3MucG9zaXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIHByb2Nlc3Muc3RhY2sudW5zaGlmdCh0YXNrKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzLnN0YWNrWy0tcHJvY2Vzcy5wb3NpdGlvbl0gPSB0YXNrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJvY2Vzcy5yb290ID0gdGFzay50YXNrXG5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBjb25zdCB0YXNrID0gcm9vdFxuICAgICAgICAgIHByb2Nlc3MuaXNQZW5kaW5nID0gdHJ1ZVxuICAgICAgICAgIHByb2Nlc3MuYWJvcnRIYW5kbGUgPSB0YXNrLmZvcmsocHJvY2Vzcy5vblN1Y2NlZWQsIHByb2Nlc3Mub25GYWlsKVxuICAgICAgICAgIHByb2Nlc3MuaXNQYXVzZWQgPSBwcm9jZXNzLmlzUGVuZGluZ1xuICAgICAgICAgIGlmICh0aGlzLmlzUGVuZGluZykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19